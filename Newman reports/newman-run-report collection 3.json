{
  "collection": {
    "_": {
      "postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c"
    },
    "item": [
      {
        "id": "725ca8bd-ef7e-4cbe-a410-7a47edfba320",
        "name": "Request_login",
        "request": {
          "url": {
            "protocol": "http",
            "port": "5007",
            "path": [
              "login"
            ],
            "host": [
              "162",
              "55",
              "220",
              "72"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "login",
                "value": "Mariia",
                "type": "text"
              },
              {
                "key": "password",
                "value": "abracadabra",
                "type": "text"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "1f6d89c4-df54-46bb-ae5f-104f3ad0d8d3",
              "type": "text/javascript",
              "exec": [
                "//Receive token. \r",
                "//In the environment Env3 add new variable token\r",
                "var RespData = pm.response.json();\r",
                "var resp_token = RespData.token;\r",
                "console.log(resp_token);\r",
                "\r",
                "pm.environment.set(\"token\", resp_token);\r",
                "//Optional:\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});"
              ],
              "_lastExecutionId": "a0595faa-92ee-4a2f-816e-42b3861c9b76"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      },
      {
        "id": "bec79938-dfe9-4a9c-8c58-28554cad508a",
        "name": "Request_user_info",
        "request": {
          "url": {
            "protocol": "http",
            "port": "5007",
            "path": [
              "user_info"
            ],
            "host": [
              "162",
              "55",
              "220",
              "72"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b7db80c0-1554-4b0f-a09c-cbfbc4079c66",
              "type": "text/javascript",
              "exec": [
                "//Receive Status code 200 response\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "//Check the json structure in the response.\r",
                "var schema = {\r",
                "  \"type\": \"object\",\r",
                "  \"properties\": {\r",
                "    \"person\": {\r",
                "      \"type\": \"object\",\r",
                "      \"properties\": {\r",
                "        \"u_age\": {\r",
                "          \"type\": \"integer\"\r",
                "        },\r",
                "        \"u_name\": {\r",
                "          \"type\": \"array\",\r",
                "          \"items\": [\r",
                "            {\r",
                "              \"type\": \"string\"\r",
                "            },\r",
                "            {\r",
                "              \"type\": \"integer\"\r",
                "            },\r",
                "            {\r",
                "              \"type\": \"integer\"\r",
                "            }\r",
                "          ]\r",
                "        },\r",
                "        \"u_salary_1_5_year\": {\r",
                "          \"type\": \"integer\"\r",
                "        }\r",
                "      },\r",
                "      \"required\": [\r",
                "        \"u_age\",\r",
                "        \"u_name\",\r",
                "        \"u_salary_1_5_year\"\r",
                "      ]\r",
                "    },\r",
                "    \"qa_salary_after_12_months\": {\r",
                "      \"type\": \"number\"\r",
                "    },\r",
                "    \"qa_salary_after_6_months\": {\r",
                "      \"type\": \"integer\"\r",
                "    },\r",
                "    \"start_qa_salary\": {\r",
                "      \"type\": \"integer\"\r",
                "    }\r",
                "  },\r",
                "  \"required\": [\r",
                "    \"person\",\r",
                "    \"qa_salary_after_12_months\",\r",
                "    \"qa_salary_after_6_months\",\r",
                "    \"start_qa_salary\"\r",
                "  ],\r",
                "  \"additionalProperties\": false\r",
                "}\r",
                "\r",
                "\r",
                "var RespData = pm.response.json()\r",
                "pm.test('Validate the schema json', function () {\r",
                "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                "   \r",
                "});\r",
                "console.log(tv4.error)\r",
                "// Option2\r",
                "var RespData = pm.response.json()\r",
                "pm.test('Validate the schema json', function () {\r",
                "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                "   \r",
                "});\r",
                "\r",
                "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                "var u_salary_x4 = RespData.person.u_salary_1_5_year\r",
                "pm.test(\"Salaryx4 is equal to u_salary_1_5_year\", function () {\r",
                "    pm.expect(u_salary_x4).to.eql(RespData.person.u_name[1]*4)\r",
                "});\r",
                "\r",
                "\r",
                "var qa_salary_x2 = RespData.qa_salary_after_6_months\r",
                "pm.test(\"Salaryx2 is equal to qa_salary_after_6_months\", function () {\r",
                "    pm.expect(qa_salary_x2).to.eql(RespData.person.u_name[1]*2)\r",
                "});\r",
                "\r",
                "var qa_salary_x2_9 = RespData.qa_salary_after_12_months\r",
                "pm.test(\"Salaryx2.9 is equal to qa_salary_after_12_months\", function () {\r",
                "    pm.expect(qa_salary_x2_9).to.eql(RespData.person.u_name[1]*2.9)\r",
                "});\r",
                "\r",
                "//Get the value from response field \"u_salary_1_5_year\" and send it to the field salary of the request\r",
                "\r",
                "var u_salary = RespData.person.u_salary_1_5_year\r",
                "pm.environment.set(\"salary\", u_salary)\r",
                "\r",
                "//Optional:\r",
                "console.log(u_salary)\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "41a5d18d-6092-4e46-8ee9-6266047912b4"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      },
      {
        "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
        "name": "Request_new_data",
        "request": {
          "url": {
            "path": [
              "new_data"
            ],
            "host": [
              "{{url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "age",
                "value": "35",
                "type": "text"
              },
              {
                "key": "salary",
                "value": "1500",
                "type": "text"
              },
              {
                "key": "name",
                "value": "Mariia",
                "type": "text"
              },
              {
                "key": "auth_token",
                "value": "{{token}}",
                "type": "text"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
              "type": "text/javascript",
              "exec": [
                "//Receive Status code 200 response\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "//Check the json structure in the response.\r",
                "var schema = {\r",
                "  \"type\": \"object\",\r",
                "  \"properties\": {\r",
                "    \"age\": {\r",
                "      \"type\": \"integer\"\r",
                "    },\r",
                "    \"name\": {\r",
                "      \"type\": \"string\"\r",
                "    },\r",
                "    \"salary\": {\r",
                "      \"type\": \"array\",\r",
                "      \"items\": [\r",
                "        {\r",
                "          \"type\": \"integer\"\r",
                "        },\r",
                "        {\r",
                "          \"type\": \"string\"\r",
                "        },\r",
                "        {\r",
                "          \"type\": \"string\"\r",
                "        }\r",
                "      ]\r",
                "    }\r",
                "  },\r",
                "  \"required\": [\r",
                "    \"age\",\r",
                "    \"name\",\r",
                "    \"salary\"\r",
                "  ],\r",
                "  \"additionalProperties\": false\r",
                "};\r",
                "\r",
                "\r",
                "var RespData = pm.response.json()\r",
                "\r",
                "\r",
                "pm.test('Schema is valid', function () {\r",
                "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                "   \r",
                "});\r",
                "console.log(tv4.error)\r",
                "// Option2\r",
                "var RespData = pm.response.json()\r",
                "pm.test('Validate the schema json', function () {\r",
                "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                "   \r",
                "});\r",
                "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                "});\r",
                "\r",
                "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                "});\r",
                "\r",
                "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                "pm.test(\"2 perameter is more than 1\", function () {\r",
                "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                "});\r",
                "\r",
                "pm.test(\"2 perameter is more than 0\", function () {\r",
                "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                "});"
              ],
              "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      },
      {
        "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
        "name": "Request_test_pet_info",
        "request": {
          "url": {
            "path": [
              "test_pet_info"
            ],
            "host": [
              "{{url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "age",
                "value": "35",
                "type": "text"
              },
              {
                "key": "weight",
                "value": "57",
                "type": "text"
              },
              {
                "key": "name",
                "value": "Mariia",
                "type": "text"
              },
              {
                "key": "auth_token",
                "value": "{{token}}",
                "type": "text"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "01c3928d-76f1-4357-b873-6835d5c31521",
              "type": "text/javascript",
              "exec": [
                "//Receive Status code 200 response\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "//Check the json structure in the response.\r",
                "var schema = {\r",
                "  \"type\": \"object\",\r",
                "  \"properties\": {\r",
                "    \"age\": {\r",
                "      \"type\": \"integer\"\r",
                "    },\r",
                "    \"daily_food\": {\r",
                "      \"type\": \"number\"\r",
                "    },\r",
                "    \"daily_sleep\": {\r",
                "      \"type\": \"number\"\r",
                "    },\r",
                "    \"name\": {\r",
                "      \"type\": \"string\"\r",
                "    }\r",
                "  },\r",
                "  \"required\": [\r",
                "    \"age\",\r",
                "    \"daily_food\",\r",
                "    \"daily_sleep\",\r",
                "    \"name\"\r",
                "  ],\r",
                "  \"additionalProperties\": false\r",
                "};\r",
                "\r",
                "\r",
                "var RespData = pm.response.json()\r",
                "\r",
                "\r",
                "pm.test('Schema is valid', function () {\r",
                "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                "   \r",
                "});\r",
                "console.log(tv4.error)\r",
                "// Option2\r",
                "var RespData = pm.response.json()\r",
                "pm.test('Validate the schema json', function () {\r",
                "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                "   \r",
                "});\r",
                "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                "var RespData = pm.response.json()\r",
                "var ReqData = request.data\r",
                "var RespDf = RespData.daily_food\r",
                "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                "});\r",
                "var RespDs = RespData.daily_sleep\r",
                "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                "});"
              ],
              "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      },
      {
        "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
        "name": "Request_get_test_user",
        "request": {
          "url": {
            "path": [
              "get_test_user"
            ],
            "host": [
              "{{url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "age",
                "value": "35",
                "type": "text"
              },
              {
                "key": "salary",
                "value": "{{salary}}",
                "type": "text"
              },
              {
                "key": "name",
                "value": "Mariia",
                "type": "text"
              },
              {
                "key": "auth_token",
                "value": "{{token}}",
                "type": "text"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
              "type": "text/javascript",
              "exec": [
                "//Receive Status code 200 response\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "//Check the json structure in the response.\r",
                "var schema = {\r",
                "  \"type\": \"object\",\r",
                "  \"properties\": {\r",
                "    \"age\": {\r",
                "      \"type\": \"string\"\r",
                "    },\r",
                "    \"family\": {\r",
                "      \"type\": \"object\",\r",
                "      \"properties\": {\r",
                "        \"children\": {\r",
                "          \"type\": \"array\",\r",
                "          \"items\": [\r",
                "            {\r",
                "              \"type\": \"array\",\r",
                "              \"items\": [\r",
                "                {\r",
                "                  \"type\": \"string\"\r",
                "                },\r",
                "                {\r",
                "                  \"type\": \"integer\"\r",
                "                }\r",
                "              ]\r",
                "            },\r",
                "            {\r",
                "              \"type\": \"array\",\r",
                "              \"items\": [\r",
                "                {\r",
                "                  \"type\": \"string\"\r",
                "                },\r",
                "                {\r",
                "                  \"type\": \"integer\"\r",
                "                }\r",
                "              ]\r",
                "            }\r",
                "          ]\r",
                "        },\r",
                "        \"u_salary_1_5_year\": {\r",
                "          \"type\": \"integer\"\r",
                "        }\r",
                "      },\r",
                "      \"required\": [\r",
                "        \"children\",\r",
                "        \"u_salary_1_5_year\"\r",
                "      ]\r",
                "    },\r",
                "    \"name\": {\r",
                "      \"type\": \"string\"\r",
                "    },\r",
                "    \"salary\": {\r",
                "      \"type\": \"integer\"\r",
                "    }\r",
                "  },\r",
                "  \"required\": [\r",
                "    \"age\",\r",
                "    \"family\",\r",
                "    \"name\",\r",
                "    \"salary\"\r",
                "  ],\r",
                "  \"additionalProperties\": false\r",
                "};\r",
                "var RespData = pm.response.json()\r",
                "\r",
                "\r",
                "pm.test('Schema is valid', function () {\r",
                "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                "   \r",
                "});\r",
                "console.log(tv4.error)\r",
                "// Option2\r",
                "var RespData = pm.response.json()\r",
                "pm.test('Validate the schema json', function () {\r",
                "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                "   \r",
                "});\r",
                "//Check that the value of the field name = the value of the variable name from the environment\r",
                "//Opt.1\r",
                "var Env_Name = pm.environment.get(\"name\")\r",
                "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                "\r",
                "});\r",
                "//Opt.2\r",
                "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                "\r",
                "});\r",
                "\r",
                "//Opt.3\r",
                "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                "\r",
                "});\r",
                "\r",
                "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                "var ReqData = request.data;\r",
                "pm.test(\"Response age is equal to age request\", function () {\r",
                "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                "\r",
                "});"
              ],
              "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      },
      {
        "id": "e2a5c4f5-d246-4b83-90bc-ec6ab381f003",
        "name": "Request_currency",
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "currency"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "{{token}}",
                "type": "text"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "bb9281b3-c064-46c1-9645-7b7371ed096d",
              "type": "text/javascript",
              "exec": [
                "//Optional\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "//Take any object from the sent list, use js random. Take the Cur_ID in the object and pass it through the environment to the next request.\r",
                "var RespData = pm.response.json();\r",
                " \r",
                "function getRndInteger() {\r",
                "  return Math.floor(Math.random() * RespData.length);\r",
                "}\r",
                "var rand = Math.floor(Math.random() * RespData.length);\r",
                "console.log(rand)\r",
                "pm.environment.set(\"Cur_ID\", rand);\r",
                "\r",
                "\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "f9570ab4-9e2b-43b8-b15e-1f1cd9e3a3cd"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      },
      {
        "id": "8cee4322-b0d2-4478-99b4-e133c7b6a531",
        "name": "Request_curr_byn",
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "{{token}}",
                "type": "text"
              },
              {
                "key": "curr_code",
                "value": "{{Cur_ID}}",
                "type": "text"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "024075f2-0ff6-4158-bb9e-9308b9ec81b1",
              "type": "text/javascript",
              "exec": [
                "//Receive Status code 200 response\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "//Check the json structure in the response.\r",
                "var schema = {\r",
                "    \"type\": \"object\",\r",
                "  \"properties\": {\r",
                "    \"Cur_Abbreviation\": {\r",
                "      \"type\": \"string\"\r",
                "    },\r",
                "    \"Cur_ID\": {\r",
                "      \"type\": \"integer\"\r",
                "    },\r",
                "    \"Cur_Name\": {\r",
                "      \"type\": \"string\"\r",
                "    },\r",
                "    \"Cur_OfficialRate\": {\r",
                "      \"type\": \"number\"\r",
                "    },\r",
                "    \"Cur_Scale\": {\r",
                "      \"type\": \"integer\"\r",
                "    },\r",
                "    \"Date\": {\r",
                "      \"type\": \"string\"\r",
                "    }\r",
                "  },\r",
                "  \"required\": [\r",
                "    \"Cur_Abbreviation\",\r",
                "    \"Cur_ID\",\r",
                "    \"Cur_Name\",\r",
                "    \"Cur_OfficialRate\",\r",
                "    \"Cur_Scale\",\r",
                "    \"Date\"\r",
                "  ],\r",
                "  \"additionalProperties\": false\r",
                "}\r",
                "\r",
                "var RespData = pm.response.json();\r",
                "\r",
                "pm.test('Schema is valid', function () {\r",
                "    pm.expect(tv4.validate(RespData, schema)).to.be.true\r",
                "    });\r",
                "console.log(tv4.error)\r",
                "// Option2\r",
                "var RespData = pm.response.json()\r",
                "pm.test('Validate the schema json', function () {\r",
                "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                "   \r",
                "});"
              ],
              "_lastExecutionId": "cf173d7a-3140-4a2c-b40c-cd40ec8287b3"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      },
      {
        "id": "ef349946-9bce-4550-81ee-a01389af2149",
        "name": "Request_currency ***",
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "currency"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "{{token}}",
                "type": "text"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
              "type": "text/javascript",
              "exec": [
                "//Optional\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "/*Cycle\r",
                "get a list of currencies\r",
                "iterate the list of currencies\r",
                "in each iteration, send a request to the server to get the rate of each currency\r",
                "if 500 code is returned, go to the next iteration\r",
                "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                "if there is a field, we write information about the currency in the console in the form of response*/\r",
                "\r",
                "let RespData = pm.response.json();\r",
                "let token = pm.environment.get('token');\r",
                "for (let i = 0; i < RespData.length; i ++)  {\r",
                "cur_id = RespData[i].Cur_ID;    \r",
                "    const postRequest = {\r",
                "        url: 'http://54.157.99.22:80/curr_byn',\r",
                "        method: 'POST',\r",
                "        header: {\r",
                "            'Content-Type': 'application/json',\r",
                "     },\r",
                "        body: {\r",
                "            mode: 'formdata',\r",
                "            formdata: [\r",
                "                { key: 'auth_token', value: token},\r",
                "                { key: 'curr_code', value: `${cur_id}` }\r",
                "        ]    }\r",
                "};\r",
                "pm.sendRequest(postRequest, (err, response) => {\r",
                "\r",
                " if  (pm.response.code === 200) {  \r",
                "    let resp_Data = response.json()\r",
                "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                "   { console.log(resp_Data)}\r",
                "            \r",
                "        } \r",
                "if (pm.response.code === 500) {\r",
                "return} \r",
                "else {console.log('error')}  \r",
                "}   \r",
                "  )       \r",
                "      }\r",
                "\r",
                "// console.log(err? err: resp.json())\r",
                "\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      }
    ],
    "event": [],
    "variable": [
      {
        "id": "88eae7b0-12de-42c8-a41c-d31f457e47a3",
        "type": "any",
        "value": "",
        "key": "sanity"
      }
    ],
    "info": {
      "_postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c",
      "name": "Postman 3",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2023-06-09T15:04:07.186Z",
      "postman_exported_using": "Postman/10.14.9"
    },
    "id": "7e22a781-a7b6-47c1-b74a-ea0d7d2f5c77",
    "name": "Env3",
    "values": [
      {
        "type": "any",
        "value": "",
        "key": "name"
      },
      {
        "type": "any",
        "value": "",
        "key": "age"
      },
      {
        "type": "any",
        "value": 6000,
        "key": "salary"
      },
      {
        "type": "any",
        "value": "",
        "key": "url"
      },
      {
        "type": "any",
        "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny",
        "key": "token"
      },
      {
        "type": "any",
        "value": 10,
        "key": "Cur_ID"
      }
    ]
  },
  "globals": {
    "id": "29d49ac4-75dc-426a-a9e4-2dfa5e6d297e",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 8,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 127,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 15,
        "pending": 0,
        "failed": 3
      },
      "testScripts": {
        "total": 8,
        "pending": 0,
        "failed": 3
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 1276.4960629921254,
      "responseMin": 246,
      "responseMax": 1700,
      "responseSd": 325.7253051175924,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686486668046,
      "completed": 1686486673151
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f76552fa-1f86-4566-b53b-f4d4dcbdc577",
          "httpRequestId": "1103c63c-a049-409e-9b2e-9f183e3aa2a2"
        },
        "item": {
          "id": "725ca8bd-ef7e-4cbe-a410-7a47edfba320",
          "name": "Request_login",
          "request": {
            "url": {
              "protocol": "http",
              "port": "5007",
              "path": [
                "login"
              ],
              "host": [
                "162",
                "55",
                "220",
                "72"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "login",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "abracadabra",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f6d89c4-df54-46bb-ae5f-104f3ad0d8d3",
                "type": "text/javascript",
                "exec": [
                  "//Receive token. \r",
                  "//In the environment Env3 add new variable token\r",
                  "var RespData = pm.response.json();\r",
                  "var resp_token = RespData.token;\r",
                  "console.log(resp_token);\r",
                  "\r",
                  "pm.environment.set(\"token\", resp_token);\r",
                  "//Optional:\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "a0595faa-92ee-4a2f-816e-42b3861c9b76"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5007",
            "path": [
              "login"
            ],
            "host": [
              "162",
              "55",
              "220",
              "72"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b31a49cd-c1e0-4667-850d-3bc4a0adfa78",
              "system": true
            },
            {
              "key": "Host",
              "value": "162.55.220.72:5007",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "284",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "login",
                "value": "Mariia",
                "type": "text"
              },
              {
                "key": "password",
                "value": "abracadabra",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "eeb0620f-2ebb-4a18-b174-31c14bcd74f8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "74"
            },
            {
              "key": "Server",
              "value": "Werkzeug/2.0.1 Python/3.8.10"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:50 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              47,
              115,
              51,
              52,
              108,
              102,
              103,
              98,
              106,
              47,
              77,
              97,
              114,
              105,
              105,
              97,
              47,
              106,
              106,
              100,
              57,
              48,
              57,
              47,
              50,
              57,
              53,
              56,
              55,
              107,
              106,
              107,
              87,
              112,
              113,
              99,
              51,
              53,
              51,
              51,
              97,
              98,
              114,
              97,
              99,
              97,
              100,
              97,
              98,
              114,
              97,
              50,
              56,
              51,
              57,
              53,
              55,
              101,
              118,
              110,
              121,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 318,
          "responseSize": 74
        },
        "id": "725ca8bd-ef7e-4cbe-a410-7a47edfba320",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8b651ab8-9758-4473-8222-bbfdecbe69ee",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d4e90e13-1055-420f-bdfb-67126873387f"
        },
        "item": {
          "id": "bec79938-dfe9-4a9c-8c58-28554cad508a",
          "name": "Request_user_info",
          "request": {
            "url": {
              "protocol": "http",
              "port": "5007",
              "path": [
                "user_info"
              ],
              "host": [
                "162",
                "55",
                "220",
                "72"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b7db80c0-1554-4b0f-a09c-cbfbc4079c66",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"person\": {\r",
                  "      \"type\": \"object\",\r",
                  "      \"properties\": {\r",
                  "        \"u_age\": {\r",
                  "          \"type\": \"integer\"\r",
                  "        },\r",
                  "        \"u_name\": {\r",
                  "          \"type\": \"array\",\r",
                  "          \"items\": [\r",
                  "            {\r",
                  "              \"type\": \"string\"\r",
                  "            },\r",
                  "            {\r",
                  "              \"type\": \"integer\"\r",
                  "            },\r",
                  "            {\r",
                  "              \"type\": \"integer\"\r",
                  "            }\r",
                  "          ]\r",
                  "        },\r",
                  "        \"u_salary_1_5_year\": {\r",
                  "          \"type\": \"integer\"\r",
                  "        }\r",
                  "      },\r",
                  "      \"required\": [\r",
                  "        \"u_age\",\r",
                  "        \"u_name\",\r",
                  "        \"u_salary_1_5_year\"\r",
                  "      ]\r",
                  "    },\r",
                  "    \"qa_salary_after_12_months\": {\r",
                  "      \"type\": \"number\"\r",
                  "    },\r",
                  "    \"qa_salary_after_6_months\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    },\r",
                  "    \"start_qa_salary\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"person\",\r",
                  "    \"qa_salary_after_12_months\",\r",
                  "    \"qa_salary_after_6_months\",\r",
                  "    \"start_qa_salary\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "}\r",
                  "\r",
                  "\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "\r",
                  "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                  "var u_salary_x4 = RespData.person.u_salary_1_5_year\r",
                  "pm.test(\"Salaryx4 is equal to u_salary_1_5_year\", function () {\r",
                  "    pm.expect(u_salary_x4).to.eql(RespData.person.u_name[1]*4)\r",
                  "});\r",
                  "\r",
                  "\r",
                  "var qa_salary_x2 = RespData.qa_salary_after_6_months\r",
                  "pm.test(\"Salaryx2 is equal to qa_salary_after_6_months\", function () {\r",
                  "    pm.expect(qa_salary_x2).to.eql(RespData.person.u_name[1]*2)\r",
                  "});\r",
                  "\r",
                  "var qa_salary_x2_9 = RespData.qa_salary_after_12_months\r",
                  "pm.test(\"Salaryx2.9 is equal to qa_salary_after_12_months\", function () {\r",
                  "    pm.expect(qa_salary_x2_9).to.eql(RespData.person.u_name[1]*2.9)\r",
                  "});\r",
                  "\r",
                  "//Get the value from response field \"u_salary_1_5_year\" and send it to the field salary of the request\r",
                  "\r",
                  "var u_salary = RespData.person.u_salary_1_5_year\r",
                  "pm.environment.set(\"salary\", u_salary)\r",
                  "\r",
                  "//Optional:\r",
                  "console.log(u_salary)\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "41a5d18d-6092-4e46-8ee9-6266047912b4"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5007",
            "path": [
              "user_info"
            ],
            "host": [
              "162",
              "55",
              "220",
              "72"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d76926a2-e769-4efd-9305-b7b075e55d96",
              "system": true
            },
            {
              "key": "Host",
              "value": "162.55.220.72:5007",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "150",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "e6091a7f-8580-4643-8630-2a0b6873e8ba",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "167"
            },
            {
              "key": "Server",
              "value": "Werkzeug/2.0.1 Python/3.8.10"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:51 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              101,
              114,
              115,
              111,
              110,
              34,
              58,
              123,
              34,
              117,
              95,
              97,
              103,
              101,
              34,
              58,
              51,
              53,
              44,
              34,
              117,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              91,
              34,
              77,
              97,
              114,
              105,
              105,
              97,
              34,
              44,
              49,
              53,
              48,
              48,
              44,
              51,
              53,
              93,
              44,
              34,
              117,
              95,
              115,
              97,
              108,
              97,
              114,
              121,
              95,
              49,
              95,
              53,
              95,
              121,
              101,
              97,
              114,
              34,
              58,
              54,
              48,
              48,
              48,
              125,
              44,
              34,
              113,
              97,
              95,
              115,
              97,
              108,
              97,
              114,
              121,
              95,
              97,
              102,
              116,
              101,
              114,
              95,
              49,
              50,
              95,
              109,
              111,
              110,
              116,
              104,
              115,
              34,
              58,
              52,
              51,
              53,
              48,
              46,
              48,
              44,
              34,
              113,
              97,
              95,
              115,
              97,
              108,
              97,
              114,
              121,
              95,
              97,
              102,
              116,
              101,
              114,
              95,
              54,
              95,
              109,
              111,
              110,
              116,
              104,
              115,
              34,
              58,
              51,
              48,
              48,
              48,
              44,
              34,
              115,
              116,
              97,
              114,
              116,
              95,
              113,
              97,
              95,
              115,
              97,
              108,
              97,
              114,
              121,
              34,
              58,
              49,
              53,
              48,
              48,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 246,
          "responseSize": 167
        },
        "id": "bec79938-dfe9-4a9c-8c58-28554cad508a",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Validate the schema json",
            "skipped": false
          },
          {
            "assertion": "Validate the schema json",
            "skipped": false
          },
          {
            "assertion": "Salaryx4 is equal to u_salary_1_5_year",
            "skipped": false
          },
          {
            "assertion": "Salaryx2 is equal to qa_salary_after_6_months",
            "skipped": false
          },
          {
            "assertion": "Salaryx2.9 is equal to qa_salary_after_12_months",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c7475a70-d3d3-45a0-a384-9113cb18dc42",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "65616fe1-71ab-4894-99ee-15480de6f685"
        },
        "item": {
          "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
          "name": "Request_new_data",
          "request": {
            "url": {
              "path": [
                "new_data"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "age",
                  "value": "35",
                  "type": "text"
                },
                {
                  "key": "salary",
                  "value": "1500",
                  "type": "text"
                },
                {
                  "key": "name",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"age\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    },\r",
                  "    \"name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"salary\": {\r",
                  "      \"type\": \"array\",\r",
                  "      \"items\": [\r",
                  "        {\r",
                  "          \"type\": \"integer\"\r",
                  "        },\r",
                  "        {\r",
                  "          \"type\": \"string\"\r",
                  "        },\r",
                  "        {\r",
                  "          \"type\": \"string\"\r",
                  "        }\r",
                  "      ]\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"age\",\r",
                  "    \"name\",\r",
                  "    \"salary\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "};\r",
                  "\r",
                  "\r",
                  "var RespData = pm.response.json()\r",
                  "\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                  "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                  "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                  "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                  "});\r",
                  "\r",
                  "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                  "pm.test(\"2 perameter is more than 1\", function () {\r",
                  "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                  "});\r",
                  "\r",
                  "pm.test(\"2 perameter is more than 0\", function () {\r",
                  "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                  "});"
                ],
                "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "host": [
              "new_data"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "db2028ff-d5a9-4599-838f-ff44b4405ce9",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "age",
                "value": "35",
                "type": "text"
              },
              {
                "key": "salary",
                "value": "1500",
                "type": "text"
              },
              {
                "key": "name",
                "value": "Mariia",
                "type": "text"
              },
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny",
                "type": "text"
              }
            ]
          }
        },
        "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
        "requestError": {},
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token u in JSON at position 0",
              "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
              "id": "3bf9d468-10d1-466a-904a-8d84a02dd854",
              "timestamp": 1686486669216,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "82e99a3e-0740-45bb-bd95-ef7d809634bd",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0d1db9b5-aea9-409b-b22f-5b51158b276f"
        },
        "item": {
          "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
          "name": "Request_test_pet_info",
          "request": {
            "url": {
              "path": [
                "test_pet_info"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "age",
                  "value": "35",
                  "type": "text"
                },
                {
                  "key": "weight",
                  "value": "57",
                  "type": "text"
                },
                {
                  "key": "name",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"age\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    },\r",
                  "    \"daily_food\": {\r",
                  "      \"type\": \"number\"\r",
                  "    },\r",
                  "    \"daily_sleep\": {\r",
                  "      \"type\": \"number\"\r",
                  "    },\r",
                  "    \"name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"age\",\r",
                  "    \"daily_food\",\r",
                  "    \"daily_sleep\",\r",
                  "    \"name\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "};\r",
                  "\r",
                  "\r",
                  "var RespData = pm.response.json()\r",
                  "\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                  "var RespData = pm.response.json()\r",
                  "var ReqData = request.data\r",
                  "var RespDf = RespData.daily_food\r",
                  "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                  "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                  "});\r",
                  "var RespDs = RespData.daily_sleep\r",
                  "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                  "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                  "});"
                ],
                "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "host": [
              "test_pet_info"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2206b1a0-79a8-4f6b-b8d3-0d049d8d0a7f",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "age",
                "value": "35",
                "type": "text"
              },
              {
                "key": "weight",
                "value": "57",
                "type": "text"
              },
              {
                "key": "name",
                "value": "Mariia",
                "type": "text"
              },
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny",
                "type": "text"
              }
            ]
          }
        },
        "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
        "requestError": {},
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token u in JSON at position 0",
              "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
              "id": "dbf74c3a-290f-4e7e-b3bb-4945679ff4a2",
              "timestamp": 1686486669320,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ee666b74-ec10-47c0-9507-a86d07c6bb1b",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fef08e59-651f-49dd-969d-9034a227760f"
        },
        "item": {
          "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
          "name": "Request_get_test_user",
          "request": {
            "url": {
              "path": [
                "get_test_user"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "age",
                  "value": "35",
                  "type": "text"
                },
                {
                  "key": "salary",
                  "value": "{{salary}}",
                  "type": "text"
                },
                {
                  "key": "name",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"age\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"family\": {\r",
                  "      \"type\": \"object\",\r",
                  "      \"properties\": {\r",
                  "        \"children\": {\r",
                  "          \"type\": \"array\",\r",
                  "          \"items\": [\r",
                  "            {\r",
                  "              \"type\": \"array\",\r",
                  "              \"items\": [\r",
                  "                {\r",
                  "                  \"type\": \"string\"\r",
                  "                },\r",
                  "                {\r",
                  "                  \"type\": \"integer\"\r",
                  "                }\r",
                  "              ]\r",
                  "            },\r",
                  "            {\r",
                  "              \"type\": \"array\",\r",
                  "              \"items\": [\r",
                  "                {\r",
                  "                  \"type\": \"string\"\r",
                  "                },\r",
                  "                {\r",
                  "                  \"type\": \"integer\"\r",
                  "                }\r",
                  "              ]\r",
                  "            }\r",
                  "          ]\r",
                  "        },\r",
                  "        \"u_salary_1_5_year\": {\r",
                  "          \"type\": \"integer\"\r",
                  "        }\r",
                  "      },\r",
                  "      \"required\": [\r",
                  "        \"children\",\r",
                  "        \"u_salary_1_5_year\"\r",
                  "      ]\r",
                  "    },\r",
                  "    \"name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"salary\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"age\",\r",
                  "    \"family\",\r",
                  "    \"name\",\r",
                  "    \"salary\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "};\r",
                  "var RespData = pm.response.json()\r",
                  "\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "//Check that the value of the field name = the value of the variable name from the environment\r",
                  "//Opt.1\r",
                  "var Env_Name = pm.environment.get(\"name\")\r",
                  "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                  "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                  "\r",
                  "});\r",
                  "//Opt.2\r",
                  "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                  "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                  "\r",
                  "});\r",
                  "\r",
                  "//Opt.3\r",
                  "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                  "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                  "\r",
                  "});\r",
                  "\r",
                  "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                  "var ReqData = request.data;\r",
                  "pm.test(\"Response age is equal to age request\", function () {\r",
                  "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                  "\r",
                  "});"
                ],
                "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "host": [
              "get_test_user"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5f3e3e08-ef6f-44d3-bead-26c000d34d46",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "age",
                "value": "35",
                "type": "text"
              },
              {
                "key": "salary",
                "value": "6000",
                "type": "text"
              },
              {
                "key": "name",
                "value": "Mariia",
                "type": "text"
              },
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny",
                "type": "text"
              }
            ]
          }
        },
        "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
        "requestError": {},
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token u in JSON at position 0",
              "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
              "id": "d90f3e59-a093-46f3-9676-a571d6edd400",
              "timestamp": 1686486669460,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ac99d761-c152-457b-a8b8-4802fe4018b7",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "157dfabe-0479-4fe8-85d4-23a6bfe671c3"
        },
        "item": {
          "id": "e2a5c4f5-d246-4b83-90bc-ec6ab381f003",
          "name": "Request_currency",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bb9281b3-c064-46c1-9645-7b7371ed096d",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Take any object from the sent list, use js random. Take the Cur_ID in the object and pass it through the environment to the next request.\r",
                  "var RespData = pm.response.json();\r",
                  " \r",
                  "function getRndInteger() {\r",
                  "  return Math.floor(Math.random() * RespData.length);\r",
                  "}\r",
                  "var rand = Math.floor(Math.random() * RespData.length);\r",
                  "console.log(rand)\r",
                  "pm.environment.set(\"Cur_ID\", rand);\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "f9570ab4-9e2b-43b8-b15e-1f1cd9e3a3cd"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "currency"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bbe929ce-ab2a-4ad7-9472-b8c05f775e8e",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "226",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "78b904e2-6a61-4ba1-b8a0-2d1076faea84",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:52 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "8202"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              83,
              32,
              100,
              111,
              108,
              108,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              65,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              97,
              100,
              105,
              97,
              110,
              32,
              100,
              111,
              108,
              108,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              85,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              50,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              101,
              117,
              114,
              111,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              69,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              65,
              69,
              32,
              100,
              105,
              114,
              104,
              97,
              109,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              70,
              78,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              52,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              102,
              103,
              104,
              97,
              110,
              32,
              65,
              102,
              103,
              104,
              97,
              110,
              105,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              76,
              76,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              98,
              97,
              110,
              105,
              97,
              110,
              32,
              108,
              101,
              107,
              92,
              117,
              48,
              48,
              101,
              98,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              77,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              54,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              114,
              109,
              101,
              110,
              105,
              97,
              110,
              32,
              100,
              114,
              97,
              109,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              82,
              83,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              55,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              114,
              103,
              101,
              110,
              116,
              105,
              110,
              101,
              32,
              112,
              101,
              115,
              111,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              85,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              56,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              117,
              115,
              116,
              114,
              97,
              108,
              105,
              97,
              110,
              32,
              100,
              111,
              108,
              108,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              90,
              78,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              57,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              122,
              101,
              114,
              98,
              97,
              105,
              106,
              97,
              110,
              105,
              32,
              109,
              97,
              110,
              97,
              116,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              65,
              77,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              115,
              110,
              105,
              97,
              45,
              72,
              101,
              114,
              122,
              101,
              103,
              111,
              118,
              105,
              110,
              97,
              32,
              99,
              111,
              110,
              118,
              101,
              114,
              116,
              105,
              98,
              108,
              101,
              32,
              109,
              97,
              114,
              107,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              68,
              84,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              97,
              110,
              103,
              108,
              97,
              100,
              101,
              115,
              104,
              105,
              32,
              116,
              97,
              107,
              97,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              71,
              78,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              50,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              117,
              108,
              103,
              97,
              114,
              105,
              97,
              110,
              32,
              108,
              101,
              118,
              97,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              72,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              97,
              104,
              114,
              97,
              105,
              110,
              105,
              32,
              100,
              105,
              110,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              73,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              52,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              117,
              114,
              117,
              110,
              100,
              105,
              97,
              110,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              78,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              117,
              110,
              101,
              105,
              32,
              100,
              111,
              108,
              108,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              79,
              66,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              54,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              108,
              105,
              118,
              105,
              97,
              110,
              32,
              98,
              111,
              108,
              105,
              118,
              105,
              97,
              110,
              111,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              82,
              76,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              55,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              97,
              122,
              105,
              108,
              105,
              97,
              110,
              32,
              114,
              101,
              97,
              108,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              87,
              80,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              56,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              116,
              115,
              119,
              97,
              110,
              97,
              110,
              32,
              112,
              117,
              108,
              97,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              89,
              78,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              57,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              108,
              97,
              114,
              117,
              115,
              105,
              97,
              110,
              32,
              114,
              117,
              98,
              108,
              101,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              90,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              50,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              108,
              105,
              122,
              101,
              32,
              100,
              111,
              108,
              108,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              68,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              50,
              49,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              110,
              103,
              111,
              108,
              101,
              115,
              101,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              72,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              50,
              50,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              119,
              105,
              115,
              115,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              76,
              80,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              50,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              105,
              108,
              101,
              97,
              110,
              32,
              112,
              101,
              115,
              111,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              78,
              89,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              50,
              52,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              105,
              110,
              101,
              115,
              101,
              32,
              121,
              117,
              97,
              110,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              79,
              80,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              50,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              108,
              111,
              109,
              98,
              105,
              97,
              110,
              32,
              112,
              101,
              115,
              111,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              50,
              54,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              115,
              116,
              97,
              32,
              82,
              105,
              99,
              97,
              110,
              32,
              99,
              111,
              108,
              92,
              117,
              48,
              48,
              102,
              51,
              110,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              86,
              69,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              50,
              55,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              97,
              112,
              101,
              32,
              86,
              101,
              114,
              100,
              101,
              97,
              110,
              32,
              101,
              115,
              99,
              117,
              100,
              111,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              90,
              75,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              50,
              56,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              122,
              101,
              99,
              104,
              32,
              82,
              101,
              112,
              117,
              98,
              108,
              105,
              99,
              32,
              107,
              111,
              114,
              117,
              110,
              97,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              68,
              74,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              50,
              57,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              106,
              105,
              98,
              111,
              117,
              116,
              105,
              97,
              110,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              68,
              75,
              75,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              51,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              97,
              110,
              105,
              115,
              104,
              32,
              107,
              114,
              111,
              110,
              101,
              114,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              68,
              79,
              80,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              51,
              49,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              111,
              109,
              105,
              110,
              105,
              99,
              97,
              110,
              32,
              112,
              101,
              115,
              111,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              68,
              90,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              51,
              50,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              103,
              101,
              114,
              105,
              97,
              110,
              32,
              100,
              105,
              110,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              69,
              75,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              51,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              115,
              116,
              111,
              110,
              105,
              97,
              110,
              32,
              107,
              114,
              111,
              111,
              110,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              71,
              80,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              51,
              52,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              103,
              121,
              112,
              116,
              105,
              97,
              110,
              32,
              112,
              111,
              117,
              110,
              100,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              82,
              78,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              51,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              114,
              105,
              116,
              114,
              101,
              97,
              110,
              32,
              110,
              97,
              107,
              102,
              97,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              84,
              66,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              51,
              54,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              116,
              104,
              105,
              111,
              112,
              105,
              97,
              110,
              32,
              98,
              105,
              114,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              71,
              66,
              80,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              51,
              55,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              105,
              116,
              105,
              115,
              104,
              32,
              112,
              111,
              117,
              110,
              100,
              115,
              32,
              115,
              116,
              101,
              114,
              108,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              71,
              69,
              76,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              51,
              56,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              101,
              111,
              114,
              103,
              105,
              97,
              110,
              32,
              108,
              97,
              114,
              105,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              71,
              72,
              83,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              51,
              57,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              104,
              97,
              110,
              97,
              105,
              97,
              110,
              32,
              99,
              101,
              100,
              105,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              71,
              78,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              52,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              117,
              105,
              110,
              101,
              97,
              110,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              71,
              84,
              81,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              52,
              49,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              117,
              97,
              116,
              101,
              109,
              97,
              108,
              97,
              110,
              32,
              113,
              117,
              101,
              116,
              122,
              97,
              108,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              72,
              75,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              52,
              50,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              72,
              111,
              110,
              103,
              32,
              75,
              111,
              110,
              103,
              32,
              100,
              111,
              108,
              108,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              72,
              78,
              76,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              52,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              72,
              111,
              110,
              100,
              117,
              114,
              97,
              110,
              32,
              108,
              101,
              109,
              112,
              105,
              114,
              97,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              72,
              82,
              75,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              52,
              52,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              114,
              111,
              97,
              116,
              105,
              97,
              110,
              32,
              107,
              117,
              110,
              97,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              72,
              85,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              52,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              72,
              117,
              110,
              103,
              97,
              114,
              105,
              97,
              110,
              32,
              102,
              111,
              114,
              105,
              110,
              116,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              68,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              52,
              54,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              73,
              110,
              100,
              111,
              110,
              101,
              115,
              105,
              97,
              110,
              32,
              114,
              117,
              112,
              105,
              97,
              104,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              76,
              83,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              52,
              55,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              73,
              115,
              114,
              97,
              101,
              108,
              105,
              32,
              110,
              101,
              119,
              32,
              115,
              104,
              101,
              113,
              101,
              108,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              78,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              52,
              56,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              73,
              110,
              100,
              105,
              97,
              110,
              32,
              114,
              117,
              112,
              101,
              101,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              81,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              52,
              57,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              73,
              114,
              97,
              113,
              105,
              32,
              100,
              105,
              110,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              82,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              53,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              73,
              114,
              97,
              110,
              105,
              97,
              110,
              32,
              114,
              105,
              97,
              108,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              83,
              75,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              53,
              49,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              73,
              99,
              101,
              108,
              97,
              110,
              100,
              105,
              99,
              32,
              107,
              114,
              92,
              117,
              48,
              48,
              102,
              51,
              110,
              117,
              114,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              74,
              77,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              53,
              50,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              109,
              97,
              105,
              99,
              97,
              110,
              32,
              100,
              111,
              108,
              108,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              74,
              79,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              53,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              114,
              100,
              97,
              110,
              105,
              97,
              110,
              32,
              100,
              105,
              110,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              74,
              80,
              89,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              53,
              52,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              112,
              97,
              110,
              101,
              115,
              101,
              32,
              121,
              101,
              110,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              75,
              69,
              83,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              53,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              75,
              101,
              110,
              121,
              97,
              110,
              32,
              115,
              104,
              105,
              108,
              108,
              105,
              110,
              103,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              75,
              72,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              53,
              54,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              97,
              109,
              98,
              111,
              100,
              105,
              97,
              110,
              32,
              114,
              105,
              101,
              108,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              75,
              77,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              53,
              55,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              109,
              111,
              114,
              105,
              97,
              110,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              75,
              82,
              87,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              53,
              56,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              111,
              117,
              116,
              104,
              32,
              75,
              111,
              114,
              101,
              97,
              110,
              32,
              119,
              111,
              110,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              75,
              87,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              53,
              57,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              75,
              117,
              119,
              97,
              105,
              116,
              105,
              32,
              100,
              105,
              110,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              75,
              90,
              84,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              54,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              75,
              97,
              122,
              97,
              107,
              104,
              115,
              116,
              97,
              110,
              105,
              32,
              116,
              101,
              110,
              103,
              101,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              76,
              66,
              80,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              54,
              49,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              101,
              98,
              97,
              110,
              101,
              115,
              101,
              32,
              112,
              111,
              117,
              110,
              100,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              76,
              75,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              54,
              50,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              114,
              105,
              32,
              76,
              97,
              110,
              107,
              97,
              110,
              32,
              114,
              117,
              112,
              101,
              101,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              76,
              84,
              76,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              54,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              105,
              116,
              104,
              117,
              97,
              110,
              105,
              97,
              110,
              32,
              108,
              105,
              116,
              97,
              105,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              76,
              86,
              76,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              54,
              52,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              97,
              116,
              118,
              105,
              97,
              110,
              32,
              108,
              97,
              116,
              105,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              76,
              89,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              105,
              98,
              121,
              97,
              110,
              32,
              100,
              105,
              110,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              77,
              65,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              54,
              54,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              111,
              114,
              111,
              99,
              99,
              97,
              110,
              32,
              100,
              105,
              114,
              104,
              97,
              109,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              77,
              68,
              76,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              54,
              55,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              111,
              108,
              100,
              111,
              118,
              97,
              110,
              32,
              108,
              101,
              105,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              77,
              71,
              65,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              54,
              56,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              108,
              97,
              103,
              97,
              115,
              121,
              32,
              65,
              114,
              105,
              97,
              114,
              105,
              101,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              77,
              75,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              54,
              57,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              99,
              101,
              100,
              111,
              110,
              105,
              97,
              110,
              32,
              100,
              101,
              110,
              97,
              114,
              105,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              77,
              77,
              75,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              55,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              97,
              110,
              109,
              97,
              32,
              107,
              121,
              97,
              116,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              77,
              79,
              80,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              55,
              49,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              99,
              97,
              110,
              101,
              115,
              101,
              32,
              112,
              97,
              116,
              97,
              99,
              97,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              77,
              85,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              55,
              50,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              117,
              114,
              105,
              116,
              105,
              97,
              110,
              32,
              114,
              117,
              112,
              101,
              101,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              77,
              88,
              78,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              55,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              101,
              120,
              105,
              99,
              97,
              110,
              32,
              112,
              101,
              115,
              111,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              77,
              89,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              55,
              52,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              108,
              97,
              121,
              115,
              105,
              97,
              110,
              32,
              114,
              105,
              110,
              103,
              103,
              105,
              116,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              77,
              90,
              78,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              55,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              111,
              122,
              97,
              109,
              98,
              105,
              99,
              97,
              110,
              32,
              109,
              101,
              116,
              105,
              99,
              97,
              108,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              78,
              65,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              55,
              54,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              97,
              109,
              105,
              98,
              105,
              97,
              110,
              32,
              100,
              111,
              108,
              108,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              78,
              71,
              78,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              55,
              55,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              105,
              103,
              101,
              114,
              105,
              97,
              110,
              32,
              110,
              97,
              105,
              114,
              97,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              78,
              73,
              79,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              55,
              56,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              105,
              99,
              97,
              114,
              97,
              103,
              117,
              97,
              110,
              32,
              99,
              92,
              117,
              48,
              48,
              102,
              51,
              114,
              100,
              111,
              98,
              97,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              78,
              79,
              75,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              55,
              57,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              111,
              114,
              119,
              101,
              103,
              105,
              97,
              110,
              32,
              107,
              114,
              111,
              110,
              101,
              114,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              78,
              80,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              56,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              112,
              97,
              108,
              101,
              115,
              101,
              32,
              114,
              117,
              112,
              101,
              101,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              78,
              90,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              56,
              49,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              90,
              101,
              97,
              108,
              97,
              110,
              100,
              32,
              100,
              111,
              108,
              108,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              79,
              77,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              56,
              50,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              109,
              97,
              110,
              105,
              32,
              114,
              105,
              97,
              108,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              65,
              66,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              56,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              110,
              97,
              109,
              97,
              110,
              105,
              97,
              110,
              32,
              98,
              97,
              108,
              98,
              111,
              97,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              69,
              78,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              56,
              52,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              101,
              114,
              117,
              118,
              105,
              97,
              110,
              32,
              110,
              117,
              101,
              118,
              111,
              115,
              32,
              115,
              111,
              108,
              101,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              72,
              80,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              56,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              104,
              105,
              108,
              105,
              112,
              112,
              105,
              110,
              101,
              32,
              112,
              101,
              115,
              111,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              75,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              56,
              54,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              107,
              105,
              115,
              116,
              97,
              110,
              105,
              32,
              114,
              117,
              112,
              101,
              101,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              76,
              78,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              56,
              55,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              111,
              108,
              105,
              115,
              104,
              32,
              122,
              108,
              111,
              116,
              121,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              89,
              71,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              56,
              56,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              97,
              103,
              117,
              97,
              121,
              97,
              110,
              32,
              103,
              117,
              97,
              114,
              97,
              110,
              105,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              81,
              65,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              56,
              57,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              81,
              97,
              116,
              97,
              114,
              105,
              32,
              114,
              105,
              97,
              108,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              79,
              78,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              57,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              111,
              109,
              97,
              110,
              105,
              97,
              110,
              32,
              108,
              101,
              105,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              83,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              57,
              49,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              101,
              114,
              98,
              105,
              97,
              110,
              32,
              100,
              105,
              110,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              85,
              66,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              57,
              50,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              117,
              115,
              115,
              105,
              97,
              110,
              32,
              114,
              117,
              98,
              108,
              101,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              87,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              57,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              119,
              97,
              110,
              100,
              97,
              110,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              65,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              57,
              52,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              117,
              100,
              105,
              32,
              114,
              105,
              121,
              97,
              108,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              68,
              71,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              57,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              117,
              100,
              97,
              110,
              101,
              115,
              101,
              32,
              112,
              111,
              117,
              110,
              100,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              69,
              75,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              57,
              54,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              119,
              101,
              100,
              105,
              115,
              104,
              32,
              107,
              114,
              111,
              110,
              111,
              114,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              71,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              57,
              55,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              105,
              110,
              103,
              97,
              112,
              111,
              114,
              101,
              32,
              100,
              111,
              108,
              108,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              79,
              83,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              57,
              56,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              111,
              109,
              97,
              108,
              105,
              32,
              115,
              104,
              105,
              108,
              108,
              105,
              110,
              103,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              89,
              80,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              57,
              57,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              121,
              114,
              105,
              97,
              110,
              32,
              112,
              111,
              117,
              110,
              100,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              72,
              66,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              48,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              104,
              97,
              105,
              32,
              98,
              97,
              104,
              116,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              78,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              48,
              49,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              117,
              110,
              105,
              115,
              105,
              97,
              110,
              32,
              100,
              105,
              110,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              79,
              80,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              48,
              50,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              111,
              110,
              103,
              97,
              110,
              32,
              112,
              97,
              92,
              117,
              48,
              50,
              98,
              98,
              97,
              110,
              103,
              97,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              82,
              89,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              48,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              117,
              114,
              107,
              105,
              115,
              104,
              32,
              76,
              105,
              114,
              97,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              84,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              48,
              52,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              105,
              110,
              105,
              100,
              97,
              100,
              32,
              97,
              110,
              100,
              32,
              84,
              111,
              98,
              97,
              103,
              111,
              32,
              100,
              111,
              108,
              108,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              87,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              48,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              84,
              97,
              105,
              119,
              97,
              110,
              32,
              100,
              111,
              108,
              108,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              90,
              83,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              48,
              54,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              97,
              110,
              122,
              97,
              110,
              105,
              97,
              110,
              32,
              115,
              104,
              105,
              108,
              108,
              105,
              110,
              103,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              85,
              65,
              72,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              48,
              55,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              107,
              114,
              97,
              105,
              110,
              105,
              97,
              110,
              32,
              104,
              114,
              121,
              118,
              110,
              105,
              97,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              85,
              71,
              88,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              48,
              56,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              103,
              97,
              110,
              100,
              97,
              110,
              32,
              115,
              104,
              105,
              108,
              108,
              105,
              110,
              103,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              85,
              89,
              85,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              48,
              57,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              114,
              117,
              103,
              117,
              97,
              121,
              97,
              110,
              32,
              112,
              101,
              115,
              111,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              85,
              90,
              83,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              122,
              98,
              101,
              107,
              105,
              115,
              116,
              97,
              110,
              32,
              115,
              111,
              109,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              86,
              69,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              86,
              101,
              110,
              101,
              122,
              117,
              101,
              108,
              97,
              110,
              32,
              98,
              111,
              108,
              92,
              117,
              48,
              48,
              101,
              100,
              118,
              97,
              114,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              86,
              78,
              68,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              50,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              86,
              105,
              101,
              116,
              110,
              97,
              109,
              101,
              115,
              101,
              32,
              100,
              111,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              79,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              52,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              67,
              69,
              65,
              79,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              89,
              69,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              89,
              101,
              109,
              101,
              110,
              105,
              32,
              114,
              105,
              97,
              108,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              90,
              65,
              82,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              54,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              111,
              117,
              116,
              104,
              32,
              65,
              102,
              114,
              105,
              99,
              97,
              110,
              32,
              114,
              97,
              110,
              100,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              90,
              77,
              75,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              55,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              90,
              97,
              109,
              98,
              105,
              97,
              110,
              32,
              107,
              119,
              97,
              99,
              104,
              97,
              115,
              34,
              125,
              44,
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              90,
              87,
              76,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              56,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              90,
              105,
              109,
              98,
              97,
              98,
              119,
              101,
              97,
              110,
              32,
              68,
              111,
              108,
              108,
              97,
              114,
              34,
              125,
              93,
              10
            ]
          },
          "cookie": [],
          "responseTime": 506,
          "responseSize": 8202
        },
        "id": "e2a5c4f5-d246-4b83-90bc-ec6ab381f003",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ca8072de-80e9-4514-a830-9f78d5390bfe",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "986275d6-41ac-4337-a4a2-2d86b1a48acb"
        },
        "item": {
          "id": "8cee4322-b0d2-4478-99b4-e133c7b6a531",
          "name": "Request_curr_byn",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "curr_byn"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                },
                {
                  "key": "curr_code",
                  "value": "{{Cur_ID}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "024075f2-0ff6-4158-bb9e-9308b9ec81b1",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "    \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"Cur_Abbreviation\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"Cur_ID\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    },\r",
                  "    \"Cur_Name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"Cur_OfficialRate\": {\r",
                  "      \"type\": \"number\"\r",
                  "    },\r",
                  "    \"Cur_Scale\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    },\r",
                  "    \"Date\": {\r",
                  "      \"type\": \"string\"\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"Cur_Abbreviation\",\r",
                  "    \"Cur_ID\",\r",
                  "    \"Cur_Name\",\r",
                  "    \"Cur_OfficialRate\",\r",
                  "    \"Cur_Scale\",\r",
                  "    \"Date\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "}\r",
                  "\r",
                  "var RespData = pm.response.json();\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true\r",
                  "    });\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});"
                ],
                "_lastExecutionId": "cf173d7a-3140-4a2c-b40c-cd40ec8287b3"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9aebef56-f2db-48f7-a82f-8f71f8798738",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "336",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny",
                "type": "text"
              },
              {
                "key": "curr_code",
                "value": "10",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "61718059-4ab0-4797-a360-91080a833dca",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:52 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "161"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              66,
              65,
              77,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              48,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              115,
              110,
              105,
              97,
              45,
              72,
              101,
              114,
              122,
              101,
              103,
              111,
              118,
              105,
              110,
              97,
              32,
              99,
              111,
              110,
              118,
              101,
              114,
              116,
              105,
              98,
              108,
              101,
              32,
              109,
              97,
              114,
              107,
              115,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              53,
              49,
              46,
              52,
              55,
              51,
              54,
              52,
              55,
              54,
              55,
              49,
              49,
              56,
              56,
              55,
              57,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              50,
              54,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 284,
          "responseSize": 161
        },
        "id": "8cee4322-b0d2-4478-99b4-e133c7b6a531",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Schema is valid",
            "skipped": false
          },
          {
            "assertion": "Validate the schema json",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57eecb20-3619-4d3c-ac7c-15f01694e023",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a8a136aa-14cf-456f-b6fb-fb3034e777b9",
          "scriptId": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
          "execution": "5a7c6646-a773-4555-972f-49859521b055"
        },
        "item": {
          "id": "ef349946-9bce-4550-81ee-a01389af2149",
          "name": "Request_currency ***",
          "request": {
            "url": {
              "protocol": "http",
              "port": "80",
              "path": [
                "currency"
              ],
              "host": [
                "54",
                "157",
                "99",
                "22"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                "type": "text/javascript",
                "exec": [
                  "//Optional\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "/*Cycle\r",
                  "get a list of currencies\r",
                  "iterate the list of currencies\r",
                  "in each iteration, send a request to the server to get the rate of each currency\r",
                  "if 500 code is returned, go to the next iteration\r",
                  "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                  "if there is a field, we write information about the currency in the console in the form of response*/\r",
                  "\r",
                  "let RespData = pm.response.json();\r",
                  "let token = pm.environment.get('token');\r",
                  "for (let i = 0; i < RespData.length; i ++)  {\r",
                  "cur_id = RespData[i].Cur_ID;    \r",
                  "    const postRequest = {\r",
                  "        url: 'http://54.157.99.22:80/curr_byn',\r",
                  "        method: 'POST',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "     },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'auth_token', value: token},\r",
                  "                { key: 'curr_code', value: `${cur_id}` }\r",
                  "        ]    }\r",
                  "};\r",
                  "pm.sendRequest(postRequest, (err, response) => {\r",
                  "\r",
                  " if  (pm.response.code === 200) {  \r",
                  "    let resp_Data = response.json()\r",
                  "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                  "   { console.log(resp_Data)}\r",
                  "            \r",
                  "        } \r",
                  "if (pm.response.code === 500) {\r",
                  "return} \r",
                  "else {console.log('error')}  \r",
                  "}   \r",
                  "  )       \r",
                  "      }\r",
                  "\r",
                  "// console.log(err? err: resp.json())\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "80",
            "path": [
              "curr_byn"
            ],
            "host": [
              "54",
              "157",
              "99",
              "22"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05460189-d7ac-455e-9b0c-c7486ffaf63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "54.157.99.22:80",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "337",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "auth_token",
                "value": "/s34lfgbj/Mariia/jjd909/29587kjkWpqc3533abracadabra283957evny"
              },
              {
                "key": "curr_code",
                "value": "113"
              }
            ]
          }
        },
        "response": {
          "id": "f71229ee-39aa-4d52-9ce5-1f9092d99280",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.18.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Sun, 11 Jun 2023 12:29:54 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "141"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              67,
              117,
              114,
              95,
              65,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              88,
              65,
              70,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              73,
              68,
              34,
              58,
              49,
              49,
              51,
              44,
              34,
              67,
              117,
              114,
              95,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              70,
              65,
              32,
              102,
              114,
              97,
              110,
              99,
              115,
              32,
              66,
              69,
              65,
              67,
              34,
              44,
              34,
              67,
              117,
              114,
              95,
              79,
              102,
              102,
              105,
              99,
              105,
              97,
              108,
              82,
              97,
              116,
              101,
              34,
              58,
              54,
              57,
              46,
              56,
              52,
              52,
              56,
              53,
              51,
              56,
              48,
              48,
              56,
              50,
              55,
              54,
              53,
              44,
              34,
              67,
              117,
              114,
              95,
              83,
              99,
              97,
              108,
              101,
              34,
              58,
              49,
              50,
              44,
              34,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              54,
              45,
              49,
              49,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1677,
          "responseSize": 141
        },
        "id": "14897fdc-b75f-4398-a0b8-0f44e343e65f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 33582
    },
    "failures": [
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///new_data\"",
          "stack": "Error: Invalid URI \"http:///new_data\"\n    at Request.init (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:47:10)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:84:23\n    at wrapper (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:271:20)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5793:24)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:327:20\n    at setCertificate (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:13\n    at nextTask (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5787:13)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5795:13)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:327:20\n    at setProxy (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:76:13\n    at nextTask (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5787:13)\n    at Object.waterfall (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5798:9)",
          "checksum": "8c16533c59ee2370901f4e07815be9d3",
          "id": "51c35532-e5c3-4cb1-a287-b908335a1ddd",
          "timestamp": 1686486669139,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 47,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 84,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 271,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5793,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5795,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 76,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5798,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
          "name": "Request_new_data",
          "request": {
            "url": {
              "path": [
                "new_data"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "age",
                  "value": "35",
                  "type": "text"
                },
                {
                  "key": "salary",
                  "value": "1500",
                  "type": "text"
                },
                {
                  "key": "name",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"age\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    },\r",
                  "    \"name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"salary\": {\r",
                  "      \"type\": \"array\",\r",
                  "      \"items\": [\r",
                  "        {\r",
                  "          \"type\": \"integer\"\r",
                  "        },\r",
                  "        {\r",
                  "          \"type\": \"string\"\r",
                  "        },\r",
                  "        {\r",
                  "          \"type\": \"string\"\r",
                  "        }\r",
                  "      ]\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"age\",\r",
                  "    \"name\",\r",
                  "    \"salary\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "};\r",
                  "\r",
                  "\r",
                  "var RespData = pm.response.json()\r",
                  "\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                  "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                  "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                  "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                  "});\r",
                  "\r",
                  "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                  "pm.test(\"2 perameter is more than 1\", function () {\r",
                  "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                  "});\r",
                  "\r",
                  "pm.test(\"2 perameter is more than 0\", function () {\r",
                  "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                  "});"
                ],
                "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c"
          },
          "item": [
            {
              "id": "725ca8bd-ef7e-4cbe-a410-7a47edfba320",
              "name": "Request_login",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "login",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "abracadabra",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f6d89c4-df54-46bb-ae5f-104f3ad0d8d3",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive token. \r",
                      "//In the environment Env3 add new variable token\r",
                      "var RespData = pm.response.json();\r",
                      "var resp_token = RespData.token;\r",
                      "console.log(resp_token);\r",
                      "\r",
                      "pm.environment.set(\"token\", resp_token);\r",
                      "//Optional:\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "a0595faa-92ee-4a2f-816e-42b3861c9b76"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bec79938-dfe9-4a9c-8c58-28554cad508a",
              "name": "Request_user_info",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "user_info"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7db80c0-1554-4b0f-a09c-cbfbc4079c66",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"person\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"u_age\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        \"u_name\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"string\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"u_age\",\r",
                      "        \"u_name\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"qa_salary_after_12_months\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"qa_salary_after_6_months\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"start_qa_salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"person\",\r",
                      "    \"qa_salary_after_12_months\",\r",
                      "    \"qa_salary_after_6_months\",\r",
                      "    \"start_qa_salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var u_salary_x4 = RespData.person.u_salary_1_5_year\r",
                      "pm.test(\"Salaryx4 is equal to u_salary_1_5_year\", function () {\r",
                      "    pm.expect(u_salary_x4).to.eql(RespData.person.u_name[1]*4)\r",
                      "});\r",
                      "\r",
                      "\r",
                      "var qa_salary_x2 = RespData.qa_salary_after_6_months\r",
                      "pm.test(\"Salaryx2 is equal to qa_salary_after_6_months\", function () {\r",
                      "    pm.expect(qa_salary_x2).to.eql(RespData.person.u_name[1]*2)\r",
                      "});\r",
                      "\r",
                      "var qa_salary_x2_9 = RespData.qa_salary_after_12_months\r",
                      "pm.test(\"Salaryx2.9 is equal to qa_salary_after_12_months\", function () {\r",
                      "    pm.expect(qa_salary_x2_9).to.eql(RespData.person.u_name[1]*2.9)\r",
                      "});\r",
                      "\r",
                      "//Get the value from response field \"u_salary_1_5_year\" and send it to the field salary of the request\r",
                      "\r",
                      "var u_salary = RespData.person.u_salary_1_5_year\r",
                      "pm.environment.set(\"salary\", u_salary)\r",
                      "\r",
                      "//Optional:\r",
                      "console.log(u_salary)\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "41a5d18d-6092-4e46-8ee9-6266047912b4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
              "name": "Request_new_data",
              "request": {
                "url": {
                  "path": [
                    "new_data"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "1500",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"array\",\r",
                      "      \"items\": [\r",
                      "        {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        }\r",
                      "      ]\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                      "});\r",
                      "\r",
                      "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                      "pm.test(\"2 perameter is more than 1\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                      "});\r",
                      "\r",
                      "pm.test(\"2 perameter is more than 0\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                      "});"
                    ],
                    "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
              "name": "Request_test_pet_info",
              "request": {
                "url": {
                  "path": [
                    "test_pet_info"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "weight",
                      "value": "57",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"daily_food\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"daily_sleep\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"daily_food\",\r",
                      "    \"daily_sleep\",\r",
                      "    \"name\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var RespData = pm.response.json()\r",
                      "var ReqData = request.data\r",
                      "var RespDf = RespData.daily_food\r",
                      "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                      "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                      "});\r",
                      "var RespDs = RespData.daily_sleep\r",
                      "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                      "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                      "});"
                    ],
                    "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
              "name": "Request_get_test_user",
              "request": {
                "url": {
                  "path": [
                    "get_test_user"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "{{salary}}",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"family\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"children\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"children\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"family\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//Check that the value of the field name = the value of the variable name from the environment\r",
                      "//Opt.1\r",
                      "var Env_Name = pm.environment.get(\"name\")\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                      "\r",
                      "});\r",
                      "//Opt.2\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Opt.3\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                      "var ReqData = request.data;\r",
                      "pm.test(\"Response age is equal to age request\", function () {\r",
                      "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                      "\r",
                      "});"
                    ],
                    "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "e2a5c4f5-d246-4b83-90bc-ec6ab381f003",
              "name": "Request_currency",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bb9281b3-c064-46c1-9645-7b7371ed096d",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Take any object from the sent list, use js random. Take the Cur_ID in the object and pass it through the environment to the next request.\r",
                      "var RespData = pm.response.json();\r",
                      " \r",
                      "function getRndInteger() {\r",
                      "  return Math.floor(Math.random() * RespData.length);\r",
                      "}\r",
                      "var rand = Math.floor(Math.random() * RespData.length);\r",
                      "console.log(rand)\r",
                      "pm.environment.set(\"Cur_ID\", rand);\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f9570ab4-9e2b-43b8-b15e-1f1cd9e3a3cd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "8cee4322-b0d2-4478-99b4-e133c7b6a531",
              "name": "Request_curr_byn",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "curr_byn"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    },
                    {
                      "key": "curr_code",
                      "value": "{{Cur_ID}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "024075f2-0ff6-4158-bb9e-9308b9ec81b1",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "    \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"Cur_Abbreviation\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_ID\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Cur_Name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_OfficialRate\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"Cur_Scale\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Date\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"Cur_Abbreviation\",\r",
                      "    \"Cur_ID\",\r",
                      "    \"Cur_Name\",\r",
                      "    \"Cur_OfficialRate\",\r",
                      "    \"Cur_Scale\",\r",
                      "    \"Date\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "var RespData = pm.response.json();\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true\r",
                      "    });\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});"
                    ],
                    "_lastExecutionId": "cf173d7a-3140-4a2c-b40c-cd40ec8287b3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ef349946-9bce-4550-81ee-a01389af2149",
              "name": "Request_currency ***",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "/*Cycle\r",
                      "get a list of currencies\r",
                      "iterate the list of currencies\r",
                      "in each iteration, send a request to the server to get the rate of each currency\r",
                      "if 500 code is returned, go to the next iteration\r",
                      "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                      "if there is a field, we write information about the currency in the console in the form of response*/\r",
                      "\r",
                      "let RespData = pm.response.json();\r",
                      "let token = pm.environment.get('token');\r",
                      "for (let i = 0; i < RespData.length; i ++)  {\r",
                      "cur_id = RespData[i].Cur_ID;    \r",
                      "    const postRequest = {\r",
                      "        url: 'http://54.157.99.22:80/curr_byn',\r",
                      "        method: 'POST',\r",
                      "        header: {\r",
                      "            'Content-Type': 'application/json',\r",
                      "     },\r",
                      "        body: {\r",
                      "            mode: 'formdata',\r",
                      "            formdata: [\r",
                      "                { key: 'auth_token', value: token},\r",
                      "                { key: 'curr_code', value: `${cur_id}` }\r",
                      "        ]    }\r",
                      "};\r",
                      "pm.sendRequest(postRequest, (err, response) => {\r",
                      "\r",
                      " if  (pm.response.code === 200) {  \r",
                      "    let resp_Data = response.json()\r",
                      "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                      "   { console.log(resp_Data)}\r",
                      "            \r",
                      "        } \r",
                      "if (pm.response.code === 500) {\r",
                      "return} \r",
                      "else {console.log('error')}  \r",
                      "}   \r",
                      "  )       \r",
                      "      }\r",
                      "\r",
                      "// console.log(err? err: resp.json())\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [],
          "variable": [
            {
              "id": "88eae7b0-12de-42c8-a41c-d31f457e47a3",
              "type": "any",
              "value": "",
              "key": "sanity"
            }
          ],
          "info": {
            "_postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c",
            "name": "Postman 3",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "c7475a70-d3d3-45a0-a384-9113cb18dc42",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "65616fe1-71ab-4894-99ee-15480de6f685"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "bd291fd6636fa58b6be1d6a9c5c383ff",
          "id": "63177303-5bf3-4420-a56e-8aa736c28317",
          "timestamp": 1686486669208,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
          "name": "Request_new_data",
          "request": {
            "url": {
              "path": [
                "new_data"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "age",
                  "value": "35",
                  "type": "text"
                },
                {
                  "key": "salary",
                  "value": "1500",
                  "type": "text"
                },
                {
                  "key": "name",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"age\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    },\r",
                  "    \"name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"salary\": {\r",
                  "      \"type\": \"array\",\r",
                  "      \"items\": [\r",
                  "        {\r",
                  "          \"type\": \"integer\"\r",
                  "        },\r",
                  "        {\r",
                  "          \"type\": \"string\"\r",
                  "        },\r",
                  "        {\r",
                  "          \"type\": \"string\"\r",
                  "        }\r",
                  "      ]\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"age\",\r",
                  "    \"name\",\r",
                  "    \"salary\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "};\r",
                  "\r",
                  "\r",
                  "var RespData = pm.response.json()\r",
                  "\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                  "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                  "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                  "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                  "});\r",
                  "\r",
                  "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                  "pm.test(\"2 perameter is more than 1\", function () {\r",
                  "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                  "});\r",
                  "\r",
                  "pm.test(\"2 perameter is more than 0\", function () {\r",
                  "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                  "});"
                ],
                "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c"
          },
          "item": [
            {
              "id": "725ca8bd-ef7e-4cbe-a410-7a47edfba320",
              "name": "Request_login",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "login",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "abracadabra",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f6d89c4-df54-46bb-ae5f-104f3ad0d8d3",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive token. \r",
                      "//In the environment Env3 add new variable token\r",
                      "var RespData = pm.response.json();\r",
                      "var resp_token = RespData.token;\r",
                      "console.log(resp_token);\r",
                      "\r",
                      "pm.environment.set(\"token\", resp_token);\r",
                      "//Optional:\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "a0595faa-92ee-4a2f-816e-42b3861c9b76"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bec79938-dfe9-4a9c-8c58-28554cad508a",
              "name": "Request_user_info",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "user_info"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7db80c0-1554-4b0f-a09c-cbfbc4079c66",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"person\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"u_age\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        \"u_name\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"string\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"u_age\",\r",
                      "        \"u_name\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"qa_salary_after_12_months\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"qa_salary_after_6_months\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"start_qa_salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"person\",\r",
                      "    \"qa_salary_after_12_months\",\r",
                      "    \"qa_salary_after_6_months\",\r",
                      "    \"start_qa_salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var u_salary_x4 = RespData.person.u_salary_1_5_year\r",
                      "pm.test(\"Salaryx4 is equal to u_salary_1_5_year\", function () {\r",
                      "    pm.expect(u_salary_x4).to.eql(RespData.person.u_name[1]*4)\r",
                      "});\r",
                      "\r",
                      "\r",
                      "var qa_salary_x2 = RespData.qa_salary_after_6_months\r",
                      "pm.test(\"Salaryx2 is equal to qa_salary_after_6_months\", function () {\r",
                      "    pm.expect(qa_salary_x2).to.eql(RespData.person.u_name[1]*2)\r",
                      "});\r",
                      "\r",
                      "var qa_salary_x2_9 = RespData.qa_salary_after_12_months\r",
                      "pm.test(\"Salaryx2.9 is equal to qa_salary_after_12_months\", function () {\r",
                      "    pm.expect(qa_salary_x2_9).to.eql(RespData.person.u_name[1]*2.9)\r",
                      "});\r",
                      "\r",
                      "//Get the value from response field \"u_salary_1_5_year\" and send it to the field salary of the request\r",
                      "\r",
                      "var u_salary = RespData.person.u_salary_1_5_year\r",
                      "pm.environment.set(\"salary\", u_salary)\r",
                      "\r",
                      "//Optional:\r",
                      "console.log(u_salary)\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "41a5d18d-6092-4e46-8ee9-6266047912b4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
              "name": "Request_new_data",
              "request": {
                "url": {
                  "path": [
                    "new_data"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "1500",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"array\",\r",
                      "      \"items\": [\r",
                      "        {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        }\r",
                      "      ]\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                      "});\r",
                      "\r",
                      "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                      "pm.test(\"2 perameter is more than 1\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                      "});\r",
                      "\r",
                      "pm.test(\"2 perameter is more than 0\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                      "});"
                    ],
                    "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
              "name": "Request_test_pet_info",
              "request": {
                "url": {
                  "path": [
                    "test_pet_info"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "weight",
                      "value": "57",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"daily_food\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"daily_sleep\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"daily_food\",\r",
                      "    \"daily_sleep\",\r",
                      "    \"name\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var RespData = pm.response.json()\r",
                      "var ReqData = request.data\r",
                      "var RespDf = RespData.daily_food\r",
                      "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                      "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                      "});\r",
                      "var RespDs = RespData.daily_sleep\r",
                      "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                      "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                      "});"
                    ],
                    "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
              "name": "Request_get_test_user",
              "request": {
                "url": {
                  "path": [
                    "get_test_user"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "{{salary}}",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"family\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"children\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"children\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"family\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//Check that the value of the field name = the value of the variable name from the environment\r",
                      "//Opt.1\r",
                      "var Env_Name = pm.environment.get(\"name\")\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                      "\r",
                      "});\r",
                      "//Opt.2\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Opt.3\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                      "var ReqData = request.data;\r",
                      "pm.test(\"Response age is equal to age request\", function () {\r",
                      "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                      "\r",
                      "});"
                    ],
                    "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "e2a5c4f5-d246-4b83-90bc-ec6ab381f003",
              "name": "Request_currency",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bb9281b3-c064-46c1-9645-7b7371ed096d",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Take any object from the sent list, use js random. Take the Cur_ID in the object and pass it through the environment to the next request.\r",
                      "var RespData = pm.response.json();\r",
                      " \r",
                      "function getRndInteger() {\r",
                      "  return Math.floor(Math.random() * RespData.length);\r",
                      "}\r",
                      "var rand = Math.floor(Math.random() * RespData.length);\r",
                      "console.log(rand)\r",
                      "pm.environment.set(\"Cur_ID\", rand);\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f9570ab4-9e2b-43b8-b15e-1f1cd9e3a3cd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "8cee4322-b0d2-4478-99b4-e133c7b6a531",
              "name": "Request_curr_byn",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "curr_byn"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    },
                    {
                      "key": "curr_code",
                      "value": "{{Cur_ID}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "024075f2-0ff6-4158-bb9e-9308b9ec81b1",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "    \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"Cur_Abbreviation\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_ID\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Cur_Name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_OfficialRate\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"Cur_Scale\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Date\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"Cur_Abbreviation\",\r",
                      "    \"Cur_ID\",\r",
                      "    \"Cur_Name\",\r",
                      "    \"Cur_OfficialRate\",\r",
                      "    \"Cur_Scale\",\r",
                      "    \"Date\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "var RespData = pm.response.json();\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true\r",
                      "    });\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});"
                    ],
                    "_lastExecutionId": "cf173d7a-3140-4a2c-b40c-cd40ec8287b3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ef349946-9bce-4550-81ee-a01389af2149",
              "name": "Request_currency ***",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "/*Cycle\r",
                      "get a list of currencies\r",
                      "iterate the list of currencies\r",
                      "in each iteration, send a request to the server to get the rate of each currency\r",
                      "if 500 code is returned, go to the next iteration\r",
                      "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                      "if there is a field, we write information about the currency in the console in the form of response*/\r",
                      "\r",
                      "let RespData = pm.response.json();\r",
                      "let token = pm.environment.get('token');\r",
                      "for (let i = 0; i < RespData.length; i ++)  {\r",
                      "cur_id = RespData[i].Cur_ID;    \r",
                      "    const postRequest = {\r",
                      "        url: 'http://54.157.99.22:80/curr_byn',\r",
                      "        method: 'POST',\r",
                      "        header: {\r",
                      "            'Content-Type': 'application/json',\r",
                      "     },\r",
                      "        body: {\r",
                      "            mode: 'formdata',\r",
                      "            formdata: [\r",
                      "                { key: 'auth_token', value: token},\r",
                      "                { key: 'curr_code', value: `${cur_id}` }\r",
                      "        ]    }\r",
                      "};\r",
                      "pm.sendRequest(postRequest, (err, response) => {\r",
                      "\r",
                      " if  (pm.response.code === 200) {  \r",
                      "    let resp_Data = response.json()\r",
                      "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                      "   { console.log(resp_Data)}\r",
                      "            \r",
                      "        } \r",
                      "if (pm.response.code === 500) {\r",
                      "return} \r",
                      "else {console.log('error')}  \r",
                      "}   \r",
                      "  )       \r",
                      "      }\r",
                      "\r",
                      "// console.log(err? err: resp.json())\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [],
          "variable": [
            {
              "id": "88eae7b0-12de-42c8-a41c-d31f457e47a3",
              "type": "any",
              "value": "",
              "key": "sanity"
            }
          ],
          "info": {
            "_postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c",
            "name": "Postman 3",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "c7475a70-d3d3-45a0-a384-9113cb18dc42",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "65616fe1-71ab-4894-99ee-15480de6f685",
          "scriptId": "fc94badf-639c-4254-945b-ceba22e8aa0b",
          "execution": "1ac86efd-338b-49b8-9351-37c3be24ee50"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token u in JSON at position 0",
          "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
          "id": "3bf9d468-10d1-466a-904a-8d84a02dd854",
          "timestamp": 1686486669216,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
          "name": "Request_new_data",
          "request": {
            "url": {
              "path": [
                "new_data"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "age",
                  "value": "35",
                  "type": "text"
                },
                {
                  "key": "salary",
                  "value": "1500",
                  "type": "text"
                },
                {
                  "key": "name",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"age\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    },\r",
                  "    \"name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"salary\": {\r",
                  "      \"type\": \"array\",\r",
                  "      \"items\": [\r",
                  "        {\r",
                  "          \"type\": \"integer\"\r",
                  "        },\r",
                  "        {\r",
                  "          \"type\": \"string\"\r",
                  "        },\r",
                  "        {\r",
                  "          \"type\": \"string\"\r",
                  "        }\r",
                  "      ]\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"age\",\r",
                  "    \"name\",\r",
                  "    \"salary\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "};\r",
                  "\r",
                  "\r",
                  "var RespData = pm.response.json()\r",
                  "\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                  "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                  "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                  "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                  "});\r",
                  "\r",
                  "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                  "pm.test(\"2 perameter is more than 1\", function () {\r",
                  "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                  "});\r",
                  "\r",
                  "pm.test(\"2 perameter is more than 0\", function () {\r",
                  "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                  "});"
                ],
                "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c"
          },
          "item": [
            {
              "id": "725ca8bd-ef7e-4cbe-a410-7a47edfba320",
              "name": "Request_login",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "login",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "abracadabra",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f6d89c4-df54-46bb-ae5f-104f3ad0d8d3",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive token. \r",
                      "//In the environment Env3 add new variable token\r",
                      "var RespData = pm.response.json();\r",
                      "var resp_token = RespData.token;\r",
                      "console.log(resp_token);\r",
                      "\r",
                      "pm.environment.set(\"token\", resp_token);\r",
                      "//Optional:\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "a0595faa-92ee-4a2f-816e-42b3861c9b76"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bec79938-dfe9-4a9c-8c58-28554cad508a",
              "name": "Request_user_info",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "user_info"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7db80c0-1554-4b0f-a09c-cbfbc4079c66",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"person\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"u_age\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        \"u_name\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"string\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"u_age\",\r",
                      "        \"u_name\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"qa_salary_after_12_months\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"qa_salary_after_6_months\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"start_qa_salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"person\",\r",
                      "    \"qa_salary_after_12_months\",\r",
                      "    \"qa_salary_after_6_months\",\r",
                      "    \"start_qa_salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var u_salary_x4 = RespData.person.u_salary_1_5_year\r",
                      "pm.test(\"Salaryx4 is equal to u_salary_1_5_year\", function () {\r",
                      "    pm.expect(u_salary_x4).to.eql(RespData.person.u_name[1]*4)\r",
                      "});\r",
                      "\r",
                      "\r",
                      "var qa_salary_x2 = RespData.qa_salary_after_6_months\r",
                      "pm.test(\"Salaryx2 is equal to qa_salary_after_6_months\", function () {\r",
                      "    pm.expect(qa_salary_x2).to.eql(RespData.person.u_name[1]*2)\r",
                      "});\r",
                      "\r",
                      "var qa_salary_x2_9 = RespData.qa_salary_after_12_months\r",
                      "pm.test(\"Salaryx2.9 is equal to qa_salary_after_12_months\", function () {\r",
                      "    pm.expect(qa_salary_x2_9).to.eql(RespData.person.u_name[1]*2.9)\r",
                      "});\r",
                      "\r",
                      "//Get the value from response field \"u_salary_1_5_year\" and send it to the field salary of the request\r",
                      "\r",
                      "var u_salary = RespData.person.u_salary_1_5_year\r",
                      "pm.environment.set(\"salary\", u_salary)\r",
                      "\r",
                      "//Optional:\r",
                      "console.log(u_salary)\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "41a5d18d-6092-4e46-8ee9-6266047912b4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
              "name": "Request_new_data",
              "request": {
                "url": {
                  "path": [
                    "new_data"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "1500",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"array\",\r",
                      "      \"items\": [\r",
                      "        {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        }\r",
                      "      ]\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                      "});\r",
                      "\r",
                      "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                      "pm.test(\"2 perameter is more than 1\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                      "});\r",
                      "\r",
                      "pm.test(\"2 perameter is more than 0\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                      "});"
                    ],
                    "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
              "name": "Request_test_pet_info",
              "request": {
                "url": {
                  "path": [
                    "test_pet_info"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "weight",
                      "value": "57",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"daily_food\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"daily_sleep\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"daily_food\",\r",
                      "    \"daily_sleep\",\r",
                      "    \"name\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var RespData = pm.response.json()\r",
                      "var ReqData = request.data\r",
                      "var RespDf = RespData.daily_food\r",
                      "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                      "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                      "});\r",
                      "var RespDs = RespData.daily_sleep\r",
                      "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                      "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                      "});"
                    ],
                    "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
              "name": "Request_get_test_user",
              "request": {
                "url": {
                  "path": [
                    "get_test_user"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "{{salary}}",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"family\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"children\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"children\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"family\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//Check that the value of the field name = the value of the variable name from the environment\r",
                      "//Opt.1\r",
                      "var Env_Name = pm.environment.get(\"name\")\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                      "\r",
                      "});\r",
                      "//Opt.2\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Opt.3\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                      "var ReqData = request.data;\r",
                      "pm.test(\"Response age is equal to age request\", function () {\r",
                      "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                      "\r",
                      "});"
                    ],
                    "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "e2a5c4f5-d246-4b83-90bc-ec6ab381f003",
              "name": "Request_currency",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bb9281b3-c064-46c1-9645-7b7371ed096d",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Take any object from the sent list, use js random. Take the Cur_ID in the object and pass it through the environment to the next request.\r",
                      "var RespData = pm.response.json();\r",
                      " \r",
                      "function getRndInteger() {\r",
                      "  return Math.floor(Math.random() * RespData.length);\r",
                      "}\r",
                      "var rand = Math.floor(Math.random() * RespData.length);\r",
                      "console.log(rand)\r",
                      "pm.environment.set(\"Cur_ID\", rand);\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f9570ab4-9e2b-43b8-b15e-1f1cd9e3a3cd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "8cee4322-b0d2-4478-99b4-e133c7b6a531",
              "name": "Request_curr_byn",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "curr_byn"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    },
                    {
                      "key": "curr_code",
                      "value": "{{Cur_ID}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "024075f2-0ff6-4158-bb9e-9308b9ec81b1",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "    \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"Cur_Abbreviation\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_ID\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Cur_Name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_OfficialRate\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"Cur_Scale\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Date\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"Cur_Abbreviation\",\r",
                      "    \"Cur_ID\",\r",
                      "    \"Cur_Name\",\r",
                      "    \"Cur_OfficialRate\",\r",
                      "    \"Cur_Scale\",\r",
                      "    \"Date\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "var RespData = pm.response.json();\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true\r",
                      "    });\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});"
                    ],
                    "_lastExecutionId": "cf173d7a-3140-4a2c-b40c-cd40ec8287b3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ef349946-9bce-4550-81ee-a01389af2149",
              "name": "Request_currency ***",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "/*Cycle\r",
                      "get a list of currencies\r",
                      "iterate the list of currencies\r",
                      "in each iteration, send a request to the server to get the rate of each currency\r",
                      "if 500 code is returned, go to the next iteration\r",
                      "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                      "if there is a field, we write information about the currency in the console in the form of response*/\r",
                      "\r",
                      "let RespData = pm.response.json();\r",
                      "let token = pm.environment.get('token');\r",
                      "for (let i = 0; i < RespData.length; i ++)  {\r",
                      "cur_id = RespData[i].Cur_ID;    \r",
                      "    const postRequest = {\r",
                      "        url: 'http://54.157.99.22:80/curr_byn',\r",
                      "        method: 'POST',\r",
                      "        header: {\r",
                      "            'Content-Type': 'application/json',\r",
                      "     },\r",
                      "        body: {\r",
                      "            mode: 'formdata',\r",
                      "            formdata: [\r",
                      "                { key: 'auth_token', value: token},\r",
                      "                { key: 'curr_code', value: `${cur_id}` }\r",
                      "        ]    }\r",
                      "};\r",
                      "pm.sendRequest(postRequest, (err, response) => {\r",
                      "\r",
                      " if  (pm.response.code === 200) {  \r",
                      "    let resp_Data = response.json()\r",
                      "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                      "   { console.log(resp_Data)}\r",
                      "            \r",
                      "        } \r",
                      "if (pm.response.code === 500) {\r",
                      "return} \r",
                      "else {console.log('error')}  \r",
                      "}   \r",
                      "  )       \r",
                      "      }\r",
                      "\r",
                      "// console.log(err? err: resp.json())\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [],
          "variable": [
            {
              "id": "88eae7b0-12de-42c8-a41c-d31f457e47a3",
              "type": "any",
              "value": "",
              "key": "sanity"
            }
          ],
          "info": {
            "_postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c",
            "name": "Postman 3",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "c7475a70-d3d3-45a0-a384-9113cb18dc42",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "65616fe1-71ab-4894-99ee-15480de6f685",
          "scriptId": "fc94badf-639c-4254-945b-ceba22e8aa0b"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///test_pet_info\"",
          "stack": "Error: Invalid URI \"http:///test_pet_info\"\n    at Request.init (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:47:10)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:84:23\n    at wrapper (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:271:20)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5793:24)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:327:20\n    at setCertificate (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:13\n    at nextTask (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5787:13)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5795:13)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:327:20\n    at setProxy (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:76:13\n    at nextTask (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5787:13)\n    at Object.waterfall (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5798:9)",
          "checksum": "5dfa4f8eb7255f06614826778745951e",
          "id": "f6665736-57d3-4262-bb4d-3809985b95f5",
          "timestamp": 1686486669268,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 47,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 84,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 271,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5793,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5795,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 76,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5798,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
          "name": "Request_test_pet_info",
          "request": {
            "url": {
              "path": [
                "test_pet_info"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "age",
                  "value": "35",
                  "type": "text"
                },
                {
                  "key": "weight",
                  "value": "57",
                  "type": "text"
                },
                {
                  "key": "name",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"age\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    },\r",
                  "    \"daily_food\": {\r",
                  "      \"type\": \"number\"\r",
                  "    },\r",
                  "    \"daily_sleep\": {\r",
                  "      \"type\": \"number\"\r",
                  "    },\r",
                  "    \"name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"age\",\r",
                  "    \"daily_food\",\r",
                  "    \"daily_sleep\",\r",
                  "    \"name\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "};\r",
                  "\r",
                  "\r",
                  "var RespData = pm.response.json()\r",
                  "\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                  "var RespData = pm.response.json()\r",
                  "var ReqData = request.data\r",
                  "var RespDf = RespData.daily_food\r",
                  "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                  "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                  "});\r",
                  "var RespDs = RespData.daily_sleep\r",
                  "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                  "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                  "});"
                ],
                "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c"
          },
          "item": [
            {
              "id": "725ca8bd-ef7e-4cbe-a410-7a47edfba320",
              "name": "Request_login",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "login",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "abracadabra",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f6d89c4-df54-46bb-ae5f-104f3ad0d8d3",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive token. \r",
                      "//In the environment Env3 add new variable token\r",
                      "var RespData = pm.response.json();\r",
                      "var resp_token = RespData.token;\r",
                      "console.log(resp_token);\r",
                      "\r",
                      "pm.environment.set(\"token\", resp_token);\r",
                      "//Optional:\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "a0595faa-92ee-4a2f-816e-42b3861c9b76"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bec79938-dfe9-4a9c-8c58-28554cad508a",
              "name": "Request_user_info",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "user_info"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7db80c0-1554-4b0f-a09c-cbfbc4079c66",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"person\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"u_age\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        \"u_name\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"string\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"u_age\",\r",
                      "        \"u_name\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"qa_salary_after_12_months\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"qa_salary_after_6_months\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"start_qa_salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"person\",\r",
                      "    \"qa_salary_after_12_months\",\r",
                      "    \"qa_salary_after_6_months\",\r",
                      "    \"start_qa_salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var u_salary_x4 = RespData.person.u_salary_1_5_year\r",
                      "pm.test(\"Salaryx4 is equal to u_salary_1_5_year\", function () {\r",
                      "    pm.expect(u_salary_x4).to.eql(RespData.person.u_name[1]*4)\r",
                      "});\r",
                      "\r",
                      "\r",
                      "var qa_salary_x2 = RespData.qa_salary_after_6_months\r",
                      "pm.test(\"Salaryx2 is equal to qa_salary_after_6_months\", function () {\r",
                      "    pm.expect(qa_salary_x2).to.eql(RespData.person.u_name[1]*2)\r",
                      "});\r",
                      "\r",
                      "var qa_salary_x2_9 = RespData.qa_salary_after_12_months\r",
                      "pm.test(\"Salaryx2.9 is equal to qa_salary_after_12_months\", function () {\r",
                      "    pm.expect(qa_salary_x2_9).to.eql(RespData.person.u_name[1]*2.9)\r",
                      "});\r",
                      "\r",
                      "//Get the value from response field \"u_salary_1_5_year\" and send it to the field salary of the request\r",
                      "\r",
                      "var u_salary = RespData.person.u_salary_1_5_year\r",
                      "pm.environment.set(\"salary\", u_salary)\r",
                      "\r",
                      "//Optional:\r",
                      "console.log(u_salary)\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "41a5d18d-6092-4e46-8ee9-6266047912b4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
              "name": "Request_new_data",
              "request": {
                "url": {
                  "path": [
                    "new_data"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "1500",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"array\",\r",
                      "      \"items\": [\r",
                      "        {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        }\r",
                      "      ]\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                      "});\r",
                      "\r",
                      "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                      "pm.test(\"2 perameter is more than 1\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                      "});\r",
                      "\r",
                      "pm.test(\"2 perameter is more than 0\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                      "});"
                    ],
                    "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
              "name": "Request_test_pet_info",
              "request": {
                "url": {
                  "path": [
                    "test_pet_info"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "weight",
                      "value": "57",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"daily_food\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"daily_sleep\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"daily_food\",\r",
                      "    \"daily_sleep\",\r",
                      "    \"name\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var RespData = pm.response.json()\r",
                      "var ReqData = request.data\r",
                      "var RespDf = RespData.daily_food\r",
                      "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                      "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                      "});\r",
                      "var RespDs = RespData.daily_sleep\r",
                      "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                      "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                      "});"
                    ],
                    "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
              "name": "Request_get_test_user",
              "request": {
                "url": {
                  "path": [
                    "get_test_user"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "{{salary}}",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"family\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"children\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"children\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"family\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//Check that the value of the field name = the value of the variable name from the environment\r",
                      "//Opt.1\r",
                      "var Env_Name = pm.environment.get(\"name\")\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                      "\r",
                      "});\r",
                      "//Opt.2\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Opt.3\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                      "var ReqData = request.data;\r",
                      "pm.test(\"Response age is equal to age request\", function () {\r",
                      "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                      "\r",
                      "});"
                    ],
                    "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "e2a5c4f5-d246-4b83-90bc-ec6ab381f003",
              "name": "Request_currency",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bb9281b3-c064-46c1-9645-7b7371ed096d",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Take any object from the sent list, use js random. Take the Cur_ID in the object and pass it through the environment to the next request.\r",
                      "var RespData = pm.response.json();\r",
                      " \r",
                      "function getRndInteger() {\r",
                      "  return Math.floor(Math.random() * RespData.length);\r",
                      "}\r",
                      "var rand = Math.floor(Math.random() * RespData.length);\r",
                      "console.log(rand)\r",
                      "pm.environment.set(\"Cur_ID\", rand);\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f9570ab4-9e2b-43b8-b15e-1f1cd9e3a3cd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "8cee4322-b0d2-4478-99b4-e133c7b6a531",
              "name": "Request_curr_byn",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "curr_byn"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    },
                    {
                      "key": "curr_code",
                      "value": "{{Cur_ID}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "024075f2-0ff6-4158-bb9e-9308b9ec81b1",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "    \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"Cur_Abbreviation\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_ID\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Cur_Name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_OfficialRate\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"Cur_Scale\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Date\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"Cur_Abbreviation\",\r",
                      "    \"Cur_ID\",\r",
                      "    \"Cur_Name\",\r",
                      "    \"Cur_OfficialRate\",\r",
                      "    \"Cur_Scale\",\r",
                      "    \"Date\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "var RespData = pm.response.json();\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true\r",
                      "    });\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});"
                    ],
                    "_lastExecutionId": "cf173d7a-3140-4a2c-b40c-cd40ec8287b3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ef349946-9bce-4550-81ee-a01389af2149",
              "name": "Request_currency ***",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "/*Cycle\r",
                      "get a list of currencies\r",
                      "iterate the list of currencies\r",
                      "in each iteration, send a request to the server to get the rate of each currency\r",
                      "if 500 code is returned, go to the next iteration\r",
                      "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                      "if there is a field, we write information about the currency in the console in the form of response*/\r",
                      "\r",
                      "let RespData = pm.response.json();\r",
                      "let token = pm.environment.get('token');\r",
                      "for (let i = 0; i < RespData.length; i ++)  {\r",
                      "cur_id = RespData[i].Cur_ID;    \r",
                      "    const postRequest = {\r",
                      "        url: 'http://54.157.99.22:80/curr_byn',\r",
                      "        method: 'POST',\r",
                      "        header: {\r",
                      "            'Content-Type': 'application/json',\r",
                      "     },\r",
                      "        body: {\r",
                      "            mode: 'formdata',\r",
                      "            formdata: [\r",
                      "                { key: 'auth_token', value: token},\r",
                      "                { key: 'curr_code', value: `${cur_id}` }\r",
                      "        ]    }\r",
                      "};\r",
                      "pm.sendRequest(postRequest, (err, response) => {\r",
                      "\r",
                      " if  (pm.response.code === 200) {  \r",
                      "    let resp_Data = response.json()\r",
                      "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                      "   { console.log(resp_Data)}\r",
                      "            \r",
                      "        } \r",
                      "if (pm.response.code === 500) {\r",
                      "return} \r",
                      "else {console.log('error')}  \r",
                      "}   \r",
                      "  )       \r",
                      "      }\r",
                      "\r",
                      "// console.log(err? err: resp.json())\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [],
          "variable": [
            {
              "id": "88eae7b0-12de-42c8-a41c-d31f457e47a3",
              "type": "any",
              "value": "",
              "key": "sanity"
            }
          ],
          "info": {
            "_postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c",
            "name": "Postman 3",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "82e99a3e-0740-45bb-bd95-ef7d809634bd",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0d1db9b5-aea9-409b-b22f-5b51158b276f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "c61b79a143b5f8899a9762ad2c369493",
          "id": "4e71e7f9-3636-470d-8cf0-abc1e04c57d1",
          "timestamp": 1686486669311,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
          "name": "Request_test_pet_info",
          "request": {
            "url": {
              "path": [
                "test_pet_info"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "age",
                  "value": "35",
                  "type": "text"
                },
                {
                  "key": "weight",
                  "value": "57",
                  "type": "text"
                },
                {
                  "key": "name",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"age\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    },\r",
                  "    \"daily_food\": {\r",
                  "      \"type\": \"number\"\r",
                  "    },\r",
                  "    \"daily_sleep\": {\r",
                  "      \"type\": \"number\"\r",
                  "    },\r",
                  "    \"name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"age\",\r",
                  "    \"daily_food\",\r",
                  "    \"daily_sleep\",\r",
                  "    \"name\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "};\r",
                  "\r",
                  "\r",
                  "var RespData = pm.response.json()\r",
                  "\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                  "var RespData = pm.response.json()\r",
                  "var ReqData = request.data\r",
                  "var RespDf = RespData.daily_food\r",
                  "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                  "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                  "});\r",
                  "var RespDs = RespData.daily_sleep\r",
                  "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                  "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                  "});"
                ],
                "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c"
          },
          "item": [
            {
              "id": "725ca8bd-ef7e-4cbe-a410-7a47edfba320",
              "name": "Request_login",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "login",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "abracadabra",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f6d89c4-df54-46bb-ae5f-104f3ad0d8d3",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive token. \r",
                      "//In the environment Env3 add new variable token\r",
                      "var RespData = pm.response.json();\r",
                      "var resp_token = RespData.token;\r",
                      "console.log(resp_token);\r",
                      "\r",
                      "pm.environment.set(\"token\", resp_token);\r",
                      "//Optional:\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "a0595faa-92ee-4a2f-816e-42b3861c9b76"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bec79938-dfe9-4a9c-8c58-28554cad508a",
              "name": "Request_user_info",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "user_info"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7db80c0-1554-4b0f-a09c-cbfbc4079c66",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"person\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"u_age\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        \"u_name\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"string\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"u_age\",\r",
                      "        \"u_name\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"qa_salary_after_12_months\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"qa_salary_after_6_months\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"start_qa_salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"person\",\r",
                      "    \"qa_salary_after_12_months\",\r",
                      "    \"qa_salary_after_6_months\",\r",
                      "    \"start_qa_salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var u_salary_x4 = RespData.person.u_salary_1_5_year\r",
                      "pm.test(\"Salaryx4 is equal to u_salary_1_5_year\", function () {\r",
                      "    pm.expect(u_salary_x4).to.eql(RespData.person.u_name[1]*4)\r",
                      "});\r",
                      "\r",
                      "\r",
                      "var qa_salary_x2 = RespData.qa_salary_after_6_months\r",
                      "pm.test(\"Salaryx2 is equal to qa_salary_after_6_months\", function () {\r",
                      "    pm.expect(qa_salary_x2).to.eql(RespData.person.u_name[1]*2)\r",
                      "});\r",
                      "\r",
                      "var qa_salary_x2_9 = RespData.qa_salary_after_12_months\r",
                      "pm.test(\"Salaryx2.9 is equal to qa_salary_after_12_months\", function () {\r",
                      "    pm.expect(qa_salary_x2_9).to.eql(RespData.person.u_name[1]*2.9)\r",
                      "});\r",
                      "\r",
                      "//Get the value from response field \"u_salary_1_5_year\" and send it to the field salary of the request\r",
                      "\r",
                      "var u_salary = RespData.person.u_salary_1_5_year\r",
                      "pm.environment.set(\"salary\", u_salary)\r",
                      "\r",
                      "//Optional:\r",
                      "console.log(u_salary)\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "41a5d18d-6092-4e46-8ee9-6266047912b4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
              "name": "Request_new_data",
              "request": {
                "url": {
                  "path": [
                    "new_data"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "1500",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"array\",\r",
                      "      \"items\": [\r",
                      "        {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        }\r",
                      "      ]\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                      "});\r",
                      "\r",
                      "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                      "pm.test(\"2 perameter is more than 1\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                      "});\r",
                      "\r",
                      "pm.test(\"2 perameter is more than 0\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                      "});"
                    ],
                    "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
              "name": "Request_test_pet_info",
              "request": {
                "url": {
                  "path": [
                    "test_pet_info"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "weight",
                      "value": "57",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"daily_food\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"daily_sleep\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"daily_food\",\r",
                      "    \"daily_sleep\",\r",
                      "    \"name\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var RespData = pm.response.json()\r",
                      "var ReqData = request.data\r",
                      "var RespDf = RespData.daily_food\r",
                      "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                      "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                      "});\r",
                      "var RespDs = RespData.daily_sleep\r",
                      "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                      "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                      "});"
                    ],
                    "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
              "name": "Request_get_test_user",
              "request": {
                "url": {
                  "path": [
                    "get_test_user"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "{{salary}}",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"family\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"children\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"children\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"family\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//Check that the value of the field name = the value of the variable name from the environment\r",
                      "//Opt.1\r",
                      "var Env_Name = pm.environment.get(\"name\")\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                      "\r",
                      "});\r",
                      "//Opt.2\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Opt.3\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                      "var ReqData = request.data;\r",
                      "pm.test(\"Response age is equal to age request\", function () {\r",
                      "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                      "\r",
                      "});"
                    ],
                    "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "e2a5c4f5-d246-4b83-90bc-ec6ab381f003",
              "name": "Request_currency",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bb9281b3-c064-46c1-9645-7b7371ed096d",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Take any object from the sent list, use js random. Take the Cur_ID in the object and pass it through the environment to the next request.\r",
                      "var RespData = pm.response.json();\r",
                      " \r",
                      "function getRndInteger() {\r",
                      "  return Math.floor(Math.random() * RespData.length);\r",
                      "}\r",
                      "var rand = Math.floor(Math.random() * RespData.length);\r",
                      "console.log(rand)\r",
                      "pm.environment.set(\"Cur_ID\", rand);\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f9570ab4-9e2b-43b8-b15e-1f1cd9e3a3cd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "8cee4322-b0d2-4478-99b4-e133c7b6a531",
              "name": "Request_curr_byn",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "curr_byn"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    },
                    {
                      "key": "curr_code",
                      "value": "{{Cur_ID}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "024075f2-0ff6-4158-bb9e-9308b9ec81b1",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "    \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"Cur_Abbreviation\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_ID\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Cur_Name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_OfficialRate\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"Cur_Scale\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Date\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"Cur_Abbreviation\",\r",
                      "    \"Cur_ID\",\r",
                      "    \"Cur_Name\",\r",
                      "    \"Cur_OfficialRate\",\r",
                      "    \"Cur_Scale\",\r",
                      "    \"Date\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "var RespData = pm.response.json();\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true\r",
                      "    });\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});"
                    ],
                    "_lastExecutionId": "cf173d7a-3140-4a2c-b40c-cd40ec8287b3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ef349946-9bce-4550-81ee-a01389af2149",
              "name": "Request_currency ***",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "/*Cycle\r",
                      "get a list of currencies\r",
                      "iterate the list of currencies\r",
                      "in each iteration, send a request to the server to get the rate of each currency\r",
                      "if 500 code is returned, go to the next iteration\r",
                      "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                      "if there is a field, we write information about the currency in the console in the form of response*/\r",
                      "\r",
                      "let RespData = pm.response.json();\r",
                      "let token = pm.environment.get('token');\r",
                      "for (let i = 0; i < RespData.length; i ++)  {\r",
                      "cur_id = RespData[i].Cur_ID;    \r",
                      "    const postRequest = {\r",
                      "        url: 'http://54.157.99.22:80/curr_byn',\r",
                      "        method: 'POST',\r",
                      "        header: {\r",
                      "            'Content-Type': 'application/json',\r",
                      "     },\r",
                      "        body: {\r",
                      "            mode: 'formdata',\r",
                      "            formdata: [\r",
                      "                { key: 'auth_token', value: token},\r",
                      "                { key: 'curr_code', value: `${cur_id}` }\r",
                      "        ]    }\r",
                      "};\r",
                      "pm.sendRequest(postRequest, (err, response) => {\r",
                      "\r",
                      " if  (pm.response.code === 200) {  \r",
                      "    let resp_Data = response.json()\r",
                      "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                      "   { console.log(resp_Data)}\r",
                      "            \r",
                      "        } \r",
                      "if (pm.response.code === 500) {\r",
                      "return} \r",
                      "else {console.log('error')}  \r",
                      "}   \r",
                      "  )       \r",
                      "      }\r",
                      "\r",
                      "// console.log(err? err: resp.json())\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [],
          "variable": [
            {
              "id": "88eae7b0-12de-42c8-a41c-d31f457e47a3",
              "type": "any",
              "value": "",
              "key": "sanity"
            }
          ],
          "info": {
            "_postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c",
            "name": "Postman 3",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "82e99a3e-0740-45bb-bd95-ef7d809634bd",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0d1db9b5-aea9-409b-b22f-5b51158b276f",
          "scriptId": "01c3928d-76f1-4357-b873-6835d5c31521",
          "execution": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token u in JSON at position 0",
          "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
          "id": "dbf74c3a-290f-4e7e-b3bb-4945679ff4a2",
          "timestamp": 1686486669320,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
          "name": "Request_test_pet_info",
          "request": {
            "url": {
              "path": [
                "test_pet_info"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "age",
                  "value": "35",
                  "type": "text"
                },
                {
                  "key": "weight",
                  "value": "57",
                  "type": "text"
                },
                {
                  "key": "name",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"age\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    },\r",
                  "    \"daily_food\": {\r",
                  "      \"type\": \"number\"\r",
                  "    },\r",
                  "    \"daily_sleep\": {\r",
                  "      \"type\": \"number\"\r",
                  "    },\r",
                  "    \"name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"age\",\r",
                  "    \"daily_food\",\r",
                  "    \"daily_sleep\",\r",
                  "    \"name\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "};\r",
                  "\r",
                  "\r",
                  "var RespData = pm.response.json()\r",
                  "\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                  "var RespData = pm.response.json()\r",
                  "var ReqData = request.data\r",
                  "var RespDf = RespData.daily_food\r",
                  "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                  "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                  "});\r",
                  "var RespDs = RespData.daily_sleep\r",
                  "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                  "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                  "});"
                ],
                "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c"
          },
          "item": [
            {
              "id": "725ca8bd-ef7e-4cbe-a410-7a47edfba320",
              "name": "Request_login",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "login",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "abracadabra",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f6d89c4-df54-46bb-ae5f-104f3ad0d8d3",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive token. \r",
                      "//In the environment Env3 add new variable token\r",
                      "var RespData = pm.response.json();\r",
                      "var resp_token = RespData.token;\r",
                      "console.log(resp_token);\r",
                      "\r",
                      "pm.environment.set(\"token\", resp_token);\r",
                      "//Optional:\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "a0595faa-92ee-4a2f-816e-42b3861c9b76"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bec79938-dfe9-4a9c-8c58-28554cad508a",
              "name": "Request_user_info",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "user_info"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7db80c0-1554-4b0f-a09c-cbfbc4079c66",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"person\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"u_age\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        \"u_name\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"string\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"u_age\",\r",
                      "        \"u_name\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"qa_salary_after_12_months\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"qa_salary_after_6_months\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"start_qa_salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"person\",\r",
                      "    \"qa_salary_after_12_months\",\r",
                      "    \"qa_salary_after_6_months\",\r",
                      "    \"start_qa_salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var u_salary_x4 = RespData.person.u_salary_1_5_year\r",
                      "pm.test(\"Salaryx4 is equal to u_salary_1_5_year\", function () {\r",
                      "    pm.expect(u_salary_x4).to.eql(RespData.person.u_name[1]*4)\r",
                      "});\r",
                      "\r",
                      "\r",
                      "var qa_salary_x2 = RespData.qa_salary_after_6_months\r",
                      "pm.test(\"Salaryx2 is equal to qa_salary_after_6_months\", function () {\r",
                      "    pm.expect(qa_salary_x2).to.eql(RespData.person.u_name[1]*2)\r",
                      "});\r",
                      "\r",
                      "var qa_salary_x2_9 = RespData.qa_salary_after_12_months\r",
                      "pm.test(\"Salaryx2.9 is equal to qa_salary_after_12_months\", function () {\r",
                      "    pm.expect(qa_salary_x2_9).to.eql(RespData.person.u_name[1]*2.9)\r",
                      "});\r",
                      "\r",
                      "//Get the value from response field \"u_salary_1_5_year\" and send it to the field salary of the request\r",
                      "\r",
                      "var u_salary = RespData.person.u_salary_1_5_year\r",
                      "pm.environment.set(\"salary\", u_salary)\r",
                      "\r",
                      "//Optional:\r",
                      "console.log(u_salary)\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "41a5d18d-6092-4e46-8ee9-6266047912b4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
              "name": "Request_new_data",
              "request": {
                "url": {
                  "path": [
                    "new_data"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "1500",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"array\",\r",
                      "      \"items\": [\r",
                      "        {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        }\r",
                      "      ]\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                      "});\r",
                      "\r",
                      "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                      "pm.test(\"2 perameter is more than 1\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                      "});\r",
                      "\r",
                      "pm.test(\"2 perameter is more than 0\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                      "});"
                    ],
                    "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
              "name": "Request_test_pet_info",
              "request": {
                "url": {
                  "path": [
                    "test_pet_info"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "weight",
                      "value": "57",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"daily_food\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"daily_sleep\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"daily_food\",\r",
                      "    \"daily_sleep\",\r",
                      "    \"name\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var RespData = pm.response.json()\r",
                      "var ReqData = request.data\r",
                      "var RespDf = RespData.daily_food\r",
                      "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                      "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                      "});\r",
                      "var RespDs = RespData.daily_sleep\r",
                      "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                      "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                      "});"
                    ],
                    "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
              "name": "Request_get_test_user",
              "request": {
                "url": {
                  "path": [
                    "get_test_user"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "{{salary}}",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"family\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"children\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"children\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"family\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//Check that the value of the field name = the value of the variable name from the environment\r",
                      "//Opt.1\r",
                      "var Env_Name = pm.environment.get(\"name\")\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                      "\r",
                      "});\r",
                      "//Opt.2\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Opt.3\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                      "var ReqData = request.data;\r",
                      "pm.test(\"Response age is equal to age request\", function () {\r",
                      "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                      "\r",
                      "});"
                    ],
                    "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "e2a5c4f5-d246-4b83-90bc-ec6ab381f003",
              "name": "Request_currency",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bb9281b3-c064-46c1-9645-7b7371ed096d",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Take any object from the sent list, use js random. Take the Cur_ID in the object and pass it through the environment to the next request.\r",
                      "var RespData = pm.response.json();\r",
                      " \r",
                      "function getRndInteger() {\r",
                      "  return Math.floor(Math.random() * RespData.length);\r",
                      "}\r",
                      "var rand = Math.floor(Math.random() * RespData.length);\r",
                      "console.log(rand)\r",
                      "pm.environment.set(\"Cur_ID\", rand);\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f9570ab4-9e2b-43b8-b15e-1f1cd9e3a3cd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "8cee4322-b0d2-4478-99b4-e133c7b6a531",
              "name": "Request_curr_byn",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "curr_byn"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    },
                    {
                      "key": "curr_code",
                      "value": "{{Cur_ID}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "024075f2-0ff6-4158-bb9e-9308b9ec81b1",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "    \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"Cur_Abbreviation\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_ID\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Cur_Name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_OfficialRate\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"Cur_Scale\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Date\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"Cur_Abbreviation\",\r",
                      "    \"Cur_ID\",\r",
                      "    \"Cur_Name\",\r",
                      "    \"Cur_OfficialRate\",\r",
                      "    \"Cur_Scale\",\r",
                      "    \"Date\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "var RespData = pm.response.json();\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true\r",
                      "    });\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});"
                    ],
                    "_lastExecutionId": "cf173d7a-3140-4a2c-b40c-cd40ec8287b3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ef349946-9bce-4550-81ee-a01389af2149",
              "name": "Request_currency ***",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "/*Cycle\r",
                      "get a list of currencies\r",
                      "iterate the list of currencies\r",
                      "in each iteration, send a request to the server to get the rate of each currency\r",
                      "if 500 code is returned, go to the next iteration\r",
                      "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                      "if there is a field, we write information about the currency in the console in the form of response*/\r",
                      "\r",
                      "let RespData = pm.response.json();\r",
                      "let token = pm.environment.get('token');\r",
                      "for (let i = 0; i < RespData.length; i ++)  {\r",
                      "cur_id = RespData[i].Cur_ID;    \r",
                      "    const postRequest = {\r",
                      "        url: 'http://54.157.99.22:80/curr_byn',\r",
                      "        method: 'POST',\r",
                      "        header: {\r",
                      "            'Content-Type': 'application/json',\r",
                      "     },\r",
                      "        body: {\r",
                      "            mode: 'formdata',\r",
                      "            formdata: [\r",
                      "                { key: 'auth_token', value: token},\r",
                      "                { key: 'curr_code', value: `${cur_id}` }\r",
                      "        ]    }\r",
                      "};\r",
                      "pm.sendRequest(postRequest, (err, response) => {\r",
                      "\r",
                      " if  (pm.response.code === 200) {  \r",
                      "    let resp_Data = response.json()\r",
                      "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                      "   { console.log(resp_Data)}\r",
                      "            \r",
                      "        } \r",
                      "if (pm.response.code === 500) {\r",
                      "return} \r",
                      "else {console.log('error')}  \r",
                      "}   \r",
                      "  )       \r",
                      "      }\r",
                      "\r",
                      "// console.log(err? err: resp.json())\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [],
          "variable": [
            {
              "id": "88eae7b0-12de-42c8-a41c-d31f457e47a3",
              "type": "any",
              "value": "",
              "key": "sanity"
            }
          ],
          "info": {
            "_postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c",
            "name": "Postman 3",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "82e99a3e-0740-45bb-bd95-ef7d809634bd",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0d1db9b5-aea9-409b-b22f-5b51158b276f",
          "scriptId": "01c3928d-76f1-4357-b873-6835d5c31521"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///get_test_user\"",
          "stack": "Error: Invalid URI \"http:///get_test_user\"\n    at Request.init (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:47:10)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:84:23\n    at wrapper (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:271:20)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5793:24)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:327:20\n    at setCertificate (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:13\n    at nextTask (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5787:13)\n    at next (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5795:13)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:327:20\n    at setProxy (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:76:13\n    at nextTask (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5787:13)\n    at Object.waterfall (C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5798:9)",
          "checksum": "aa35f07c35217b4136d677ac8cdadbb4",
          "id": "57406ca6-5699-4702-8bb0-efb89ecc2f4a",
          "timestamp": 1686486669410,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 47,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 84,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 271,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5793,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5795,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 327,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 76,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5787,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\Admin\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5798,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
          "name": "Request_get_test_user",
          "request": {
            "url": {
              "path": [
                "get_test_user"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "age",
                  "value": "35",
                  "type": "text"
                },
                {
                  "key": "salary",
                  "value": "{{salary}}",
                  "type": "text"
                },
                {
                  "key": "name",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"age\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"family\": {\r",
                  "      \"type\": \"object\",\r",
                  "      \"properties\": {\r",
                  "        \"children\": {\r",
                  "          \"type\": \"array\",\r",
                  "          \"items\": [\r",
                  "            {\r",
                  "              \"type\": \"array\",\r",
                  "              \"items\": [\r",
                  "                {\r",
                  "                  \"type\": \"string\"\r",
                  "                },\r",
                  "                {\r",
                  "                  \"type\": \"integer\"\r",
                  "                }\r",
                  "              ]\r",
                  "            },\r",
                  "            {\r",
                  "              \"type\": \"array\",\r",
                  "              \"items\": [\r",
                  "                {\r",
                  "                  \"type\": \"string\"\r",
                  "                },\r",
                  "                {\r",
                  "                  \"type\": \"integer\"\r",
                  "                }\r",
                  "              ]\r",
                  "            }\r",
                  "          ]\r",
                  "        },\r",
                  "        \"u_salary_1_5_year\": {\r",
                  "          \"type\": \"integer\"\r",
                  "        }\r",
                  "      },\r",
                  "      \"required\": [\r",
                  "        \"children\",\r",
                  "        \"u_salary_1_5_year\"\r",
                  "      ]\r",
                  "    },\r",
                  "    \"name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"salary\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"age\",\r",
                  "    \"family\",\r",
                  "    \"name\",\r",
                  "    \"salary\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "};\r",
                  "var RespData = pm.response.json()\r",
                  "\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "//Check that the value of the field name = the value of the variable name from the environment\r",
                  "//Opt.1\r",
                  "var Env_Name = pm.environment.get(\"name\")\r",
                  "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                  "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                  "\r",
                  "});\r",
                  "//Opt.2\r",
                  "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                  "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                  "\r",
                  "});\r",
                  "\r",
                  "//Opt.3\r",
                  "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                  "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                  "\r",
                  "});\r",
                  "\r",
                  "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                  "var ReqData = request.data;\r",
                  "pm.test(\"Response age is equal to age request\", function () {\r",
                  "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                  "\r",
                  "});"
                ],
                "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c"
          },
          "item": [
            {
              "id": "725ca8bd-ef7e-4cbe-a410-7a47edfba320",
              "name": "Request_login",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "login",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "abracadabra",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f6d89c4-df54-46bb-ae5f-104f3ad0d8d3",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive token. \r",
                      "//In the environment Env3 add new variable token\r",
                      "var RespData = pm.response.json();\r",
                      "var resp_token = RespData.token;\r",
                      "console.log(resp_token);\r",
                      "\r",
                      "pm.environment.set(\"token\", resp_token);\r",
                      "//Optional:\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "a0595faa-92ee-4a2f-816e-42b3861c9b76"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bec79938-dfe9-4a9c-8c58-28554cad508a",
              "name": "Request_user_info",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "user_info"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7db80c0-1554-4b0f-a09c-cbfbc4079c66",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"person\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"u_age\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        \"u_name\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"string\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"u_age\",\r",
                      "        \"u_name\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"qa_salary_after_12_months\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"qa_salary_after_6_months\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"start_qa_salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"person\",\r",
                      "    \"qa_salary_after_12_months\",\r",
                      "    \"qa_salary_after_6_months\",\r",
                      "    \"start_qa_salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var u_salary_x4 = RespData.person.u_salary_1_5_year\r",
                      "pm.test(\"Salaryx4 is equal to u_salary_1_5_year\", function () {\r",
                      "    pm.expect(u_salary_x4).to.eql(RespData.person.u_name[1]*4)\r",
                      "});\r",
                      "\r",
                      "\r",
                      "var qa_salary_x2 = RespData.qa_salary_after_6_months\r",
                      "pm.test(\"Salaryx2 is equal to qa_salary_after_6_months\", function () {\r",
                      "    pm.expect(qa_salary_x2).to.eql(RespData.person.u_name[1]*2)\r",
                      "});\r",
                      "\r",
                      "var qa_salary_x2_9 = RespData.qa_salary_after_12_months\r",
                      "pm.test(\"Salaryx2.9 is equal to qa_salary_after_12_months\", function () {\r",
                      "    pm.expect(qa_salary_x2_9).to.eql(RespData.person.u_name[1]*2.9)\r",
                      "});\r",
                      "\r",
                      "//Get the value from response field \"u_salary_1_5_year\" and send it to the field salary of the request\r",
                      "\r",
                      "var u_salary = RespData.person.u_salary_1_5_year\r",
                      "pm.environment.set(\"salary\", u_salary)\r",
                      "\r",
                      "//Optional:\r",
                      "console.log(u_salary)\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "41a5d18d-6092-4e46-8ee9-6266047912b4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
              "name": "Request_new_data",
              "request": {
                "url": {
                  "path": [
                    "new_data"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "1500",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"array\",\r",
                      "      \"items\": [\r",
                      "        {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        }\r",
                      "      ]\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                      "});\r",
                      "\r",
                      "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                      "pm.test(\"2 perameter is more than 1\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                      "});\r",
                      "\r",
                      "pm.test(\"2 perameter is more than 0\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                      "});"
                    ],
                    "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
              "name": "Request_test_pet_info",
              "request": {
                "url": {
                  "path": [
                    "test_pet_info"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "weight",
                      "value": "57",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"daily_food\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"daily_sleep\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"daily_food\",\r",
                      "    \"daily_sleep\",\r",
                      "    \"name\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var RespData = pm.response.json()\r",
                      "var ReqData = request.data\r",
                      "var RespDf = RespData.daily_food\r",
                      "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                      "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                      "});\r",
                      "var RespDs = RespData.daily_sleep\r",
                      "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                      "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                      "});"
                    ],
                    "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
              "name": "Request_get_test_user",
              "request": {
                "url": {
                  "path": [
                    "get_test_user"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "{{salary}}",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"family\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"children\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"children\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"family\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//Check that the value of the field name = the value of the variable name from the environment\r",
                      "//Opt.1\r",
                      "var Env_Name = pm.environment.get(\"name\")\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                      "\r",
                      "});\r",
                      "//Opt.2\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Opt.3\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                      "var ReqData = request.data;\r",
                      "pm.test(\"Response age is equal to age request\", function () {\r",
                      "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                      "\r",
                      "});"
                    ],
                    "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "e2a5c4f5-d246-4b83-90bc-ec6ab381f003",
              "name": "Request_currency",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bb9281b3-c064-46c1-9645-7b7371ed096d",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Take any object from the sent list, use js random. Take the Cur_ID in the object and pass it through the environment to the next request.\r",
                      "var RespData = pm.response.json();\r",
                      " \r",
                      "function getRndInteger() {\r",
                      "  return Math.floor(Math.random() * RespData.length);\r",
                      "}\r",
                      "var rand = Math.floor(Math.random() * RespData.length);\r",
                      "console.log(rand)\r",
                      "pm.environment.set(\"Cur_ID\", rand);\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f9570ab4-9e2b-43b8-b15e-1f1cd9e3a3cd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "8cee4322-b0d2-4478-99b4-e133c7b6a531",
              "name": "Request_curr_byn",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "curr_byn"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    },
                    {
                      "key": "curr_code",
                      "value": "{{Cur_ID}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "024075f2-0ff6-4158-bb9e-9308b9ec81b1",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "    \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"Cur_Abbreviation\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_ID\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Cur_Name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_OfficialRate\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"Cur_Scale\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Date\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"Cur_Abbreviation\",\r",
                      "    \"Cur_ID\",\r",
                      "    \"Cur_Name\",\r",
                      "    \"Cur_OfficialRate\",\r",
                      "    \"Cur_Scale\",\r",
                      "    \"Date\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "var RespData = pm.response.json();\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true\r",
                      "    });\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});"
                    ],
                    "_lastExecutionId": "cf173d7a-3140-4a2c-b40c-cd40ec8287b3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ef349946-9bce-4550-81ee-a01389af2149",
              "name": "Request_currency ***",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "/*Cycle\r",
                      "get a list of currencies\r",
                      "iterate the list of currencies\r",
                      "in each iteration, send a request to the server to get the rate of each currency\r",
                      "if 500 code is returned, go to the next iteration\r",
                      "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                      "if there is a field, we write information about the currency in the console in the form of response*/\r",
                      "\r",
                      "let RespData = pm.response.json();\r",
                      "let token = pm.environment.get('token');\r",
                      "for (let i = 0; i < RespData.length; i ++)  {\r",
                      "cur_id = RespData[i].Cur_ID;    \r",
                      "    const postRequest = {\r",
                      "        url: 'http://54.157.99.22:80/curr_byn',\r",
                      "        method: 'POST',\r",
                      "        header: {\r",
                      "            'Content-Type': 'application/json',\r",
                      "     },\r",
                      "        body: {\r",
                      "            mode: 'formdata',\r",
                      "            formdata: [\r",
                      "                { key: 'auth_token', value: token},\r",
                      "                { key: 'curr_code', value: `${cur_id}` }\r",
                      "        ]    }\r",
                      "};\r",
                      "pm.sendRequest(postRequest, (err, response) => {\r",
                      "\r",
                      " if  (pm.response.code === 200) {  \r",
                      "    let resp_Data = response.json()\r",
                      "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                      "   { console.log(resp_Data)}\r",
                      "            \r",
                      "        } \r",
                      "if (pm.response.code === 500) {\r",
                      "return} \r",
                      "else {console.log('error')}  \r",
                      "}   \r",
                      "  )       \r",
                      "      }\r",
                      "\r",
                      "// console.log(err? err: resp.json())\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [],
          "variable": [
            {
              "id": "88eae7b0-12de-42c8-a41c-d31f457e47a3",
              "type": "any",
              "value": "",
              "key": "sanity"
            }
          ],
          "info": {
            "_postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c",
            "name": "Postman 3",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "ee666b74-ec10-47c0-9507-a86d07c6bb1b",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fef08e59-651f-49dd-969d-9034a227760f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "c1dbdb5885c0ef14135ec5af49ec3140",
          "id": "ac6e6699-705f-4786-a852-46e324a451f7",
          "timestamp": 1686486669451,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
          "name": "Request_get_test_user",
          "request": {
            "url": {
              "path": [
                "get_test_user"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "age",
                  "value": "35",
                  "type": "text"
                },
                {
                  "key": "salary",
                  "value": "{{salary}}",
                  "type": "text"
                },
                {
                  "key": "name",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"age\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"family\": {\r",
                  "      \"type\": \"object\",\r",
                  "      \"properties\": {\r",
                  "        \"children\": {\r",
                  "          \"type\": \"array\",\r",
                  "          \"items\": [\r",
                  "            {\r",
                  "              \"type\": \"array\",\r",
                  "              \"items\": [\r",
                  "                {\r",
                  "                  \"type\": \"string\"\r",
                  "                },\r",
                  "                {\r",
                  "                  \"type\": \"integer\"\r",
                  "                }\r",
                  "              ]\r",
                  "            },\r",
                  "            {\r",
                  "              \"type\": \"array\",\r",
                  "              \"items\": [\r",
                  "                {\r",
                  "                  \"type\": \"string\"\r",
                  "                },\r",
                  "                {\r",
                  "                  \"type\": \"integer\"\r",
                  "                }\r",
                  "              ]\r",
                  "            }\r",
                  "          ]\r",
                  "        },\r",
                  "        \"u_salary_1_5_year\": {\r",
                  "          \"type\": \"integer\"\r",
                  "        }\r",
                  "      },\r",
                  "      \"required\": [\r",
                  "        \"children\",\r",
                  "        \"u_salary_1_5_year\"\r",
                  "      ]\r",
                  "    },\r",
                  "    \"name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"salary\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"age\",\r",
                  "    \"family\",\r",
                  "    \"name\",\r",
                  "    \"salary\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "};\r",
                  "var RespData = pm.response.json()\r",
                  "\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "//Check that the value of the field name = the value of the variable name from the environment\r",
                  "//Opt.1\r",
                  "var Env_Name = pm.environment.get(\"name\")\r",
                  "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                  "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                  "\r",
                  "});\r",
                  "//Opt.2\r",
                  "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                  "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                  "\r",
                  "});\r",
                  "\r",
                  "//Opt.3\r",
                  "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                  "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                  "\r",
                  "});\r",
                  "\r",
                  "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                  "var ReqData = request.data;\r",
                  "pm.test(\"Response age is equal to age request\", function () {\r",
                  "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                  "\r",
                  "});"
                ],
                "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c"
          },
          "item": [
            {
              "id": "725ca8bd-ef7e-4cbe-a410-7a47edfba320",
              "name": "Request_login",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "login",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "abracadabra",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f6d89c4-df54-46bb-ae5f-104f3ad0d8d3",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive token. \r",
                      "//In the environment Env3 add new variable token\r",
                      "var RespData = pm.response.json();\r",
                      "var resp_token = RespData.token;\r",
                      "console.log(resp_token);\r",
                      "\r",
                      "pm.environment.set(\"token\", resp_token);\r",
                      "//Optional:\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "a0595faa-92ee-4a2f-816e-42b3861c9b76"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bec79938-dfe9-4a9c-8c58-28554cad508a",
              "name": "Request_user_info",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "user_info"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7db80c0-1554-4b0f-a09c-cbfbc4079c66",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"person\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"u_age\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        \"u_name\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"string\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"u_age\",\r",
                      "        \"u_name\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"qa_salary_after_12_months\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"qa_salary_after_6_months\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"start_qa_salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"person\",\r",
                      "    \"qa_salary_after_12_months\",\r",
                      "    \"qa_salary_after_6_months\",\r",
                      "    \"start_qa_salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var u_salary_x4 = RespData.person.u_salary_1_5_year\r",
                      "pm.test(\"Salaryx4 is equal to u_salary_1_5_year\", function () {\r",
                      "    pm.expect(u_salary_x4).to.eql(RespData.person.u_name[1]*4)\r",
                      "});\r",
                      "\r",
                      "\r",
                      "var qa_salary_x2 = RespData.qa_salary_after_6_months\r",
                      "pm.test(\"Salaryx2 is equal to qa_salary_after_6_months\", function () {\r",
                      "    pm.expect(qa_salary_x2).to.eql(RespData.person.u_name[1]*2)\r",
                      "});\r",
                      "\r",
                      "var qa_salary_x2_9 = RespData.qa_salary_after_12_months\r",
                      "pm.test(\"Salaryx2.9 is equal to qa_salary_after_12_months\", function () {\r",
                      "    pm.expect(qa_salary_x2_9).to.eql(RespData.person.u_name[1]*2.9)\r",
                      "});\r",
                      "\r",
                      "//Get the value from response field \"u_salary_1_5_year\" and send it to the field salary of the request\r",
                      "\r",
                      "var u_salary = RespData.person.u_salary_1_5_year\r",
                      "pm.environment.set(\"salary\", u_salary)\r",
                      "\r",
                      "//Optional:\r",
                      "console.log(u_salary)\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "41a5d18d-6092-4e46-8ee9-6266047912b4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
              "name": "Request_new_data",
              "request": {
                "url": {
                  "path": [
                    "new_data"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "1500",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"array\",\r",
                      "      \"items\": [\r",
                      "        {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        }\r",
                      "      ]\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                      "});\r",
                      "\r",
                      "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                      "pm.test(\"2 perameter is more than 1\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                      "});\r",
                      "\r",
                      "pm.test(\"2 perameter is more than 0\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                      "});"
                    ],
                    "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
              "name": "Request_test_pet_info",
              "request": {
                "url": {
                  "path": [
                    "test_pet_info"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "weight",
                      "value": "57",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"daily_food\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"daily_sleep\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"daily_food\",\r",
                      "    \"daily_sleep\",\r",
                      "    \"name\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var RespData = pm.response.json()\r",
                      "var ReqData = request.data\r",
                      "var RespDf = RespData.daily_food\r",
                      "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                      "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                      "});\r",
                      "var RespDs = RespData.daily_sleep\r",
                      "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                      "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                      "});"
                    ],
                    "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
              "name": "Request_get_test_user",
              "request": {
                "url": {
                  "path": [
                    "get_test_user"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "{{salary}}",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"family\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"children\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"children\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"family\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//Check that the value of the field name = the value of the variable name from the environment\r",
                      "//Opt.1\r",
                      "var Env_Name = pm.environment.get(\"name\")\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                      "\r",
                      "});\r",
                      "//Opt.2\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Opt.3\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                      "var ReqData = request.data;\r",
                      "pm.test(\"Response age is equal to age request\", function () {\r",
                      "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                      "\r",
                      "});"
                    ],
                    "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "e2a5c4f5-d246-4b83-90bc-ec6ab381f003",
              "name": "Request_currency",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bb9281b3-c064-46c1-9645-7b7371ed096d",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Take any object from the sent list, use js random. Take the Cur_ID in the object and pass it through the environment to the next request.\r",
                      "var RespData = pm.response.json();\r",
                      " \r",
                      "function getRndInteger() {\r",
                      "  return Math.floor(Math.random() * RespData.length);\r",
                      "}\r",
                      "var rand = Math.floor(Math.random() * RespData.length);\r",
                      "console.log(rand)\r",
                      "pm.environment.set(\"Cur_ID\", rand);\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f9570ab4-9e2b-43b8-b15e-1f1cd9e3a3cd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "8cee4322-b0d2-4478-99b4-e133c7b6a531",
              "name": "Request_curr_byn",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "curr_byn"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    },
                    {
                      "key": "curr_code",
                      "value": "{{Cur_ID}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "024075f2-0ff6-4158-bb9e-9308b9ec81b1",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "    \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"Cur_Abbreviation\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_ID\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Cur_Name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_OfficialRate\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"Cur_Scale\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Date\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"Cur_Abbreviation\",\r",
                      "    \"Cur_ID\",\r",
                      "    \"Cur_Name\",\r",
                      "    \"Cur_OfficialRate\",\r",
                      "    \"Cur_Scale\",\r",
                      "    \"Date\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "var RespData = pm.response.json();\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true\r",
                      "    });\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});"
                    ],
                    "_lastExecutionId": "cf173d7a-3140-4a2c-b40c-cd40ec8287b3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ef349946-9bce-4550-81ee-a01389af2149",
              "name": "Request_currency ***",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "/*Cycle\r",
                      "get a list of currencies\r",
                      "iterate the list of currencies\r",
                      "in each iteration, send a request to the server to get the rate of each currency\r",
                      "if 500 code is returned, go to the next iteration\r",
                      "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                      "if there is a field, we write information about the currency in the console in the form of response*/\r",
                      "\r",
                      "let RespData = pm.response.json();\r",
                      "let token = pm.environment.get('token');\r",
                      "for (let i = 0; i < RespData.length; i ++)  {\r",
                      "cur_id = RespData[i].Cur_ID;    \r",
                      "    const postRequest = {\r",
                      "        url: 'http://54.157.99.22:80/curr_byn',\r",
                      "        method: 'POST',\r",
                      "        header: {\r",
                      "            'Content-Type': 'application/json',\r",
                      "     },\r",
                      "        body: {\r",
                      "            mode: 'formdata',\r",
                      "            formdata: [\r",
                      "                { key: 'auth_token', value: token},\r",
                      "                { key: 'curr_code', value: `${cur_id}` }\r",
                      "        ]    }\r",
                      "};\r",
                      "pm.sendRequest(postRequest, (err, response) => {\r",
                      "\r",
                      " if  (pm.response.code === 200) {  \r",
                      "    let resp_Data = response.json()\r",
                      "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                      "   { console.log(resp_Data)}\r",
                      "            \r",
                      "        } \r",
                      "if (pm.response.code === 500) {\r",
                      "return} \r",
                      "else {console.log('error')}  \r",
                      "}   \r",
                      "  )       \r",
                      "      }\r",
                      "\r",
                      "// console.log(err? err: resp.json())\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [],
          "variable": [
            {
              "id": "88eae7b0-12de-42c8-a41c-d31f457e47a3",
              "type": "any",
              "value": "",
              "key": "sanity"
            }
          ],
          "info": {
            "_postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c",
            "name": "Postman 3",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "ee666b74-ec10-47c0-9507-a86d07c6bb1b",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fef08e59-651f-49dd-969d-9034a227760f",
          "scriptId": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
          "execution": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token u in JSON at position 0",
          "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
          "id": "d90f3e59-a093-46f3-9676-a571d6edd400",
          "timestamp": 1686486669460,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
          "name": "Request_get_test_user",
          "request": {
            "url": {
              "path": [
                "get_test_user"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "age",
                  "value": "35",
                  "type": "text"
                },
                {
                  "key": "salary",
                  "value": "{{salary}}",
                  "type": "text"
                },
                {
                  "key": "name",
                  "value": "Mariia",
                  "type": "text"
                },
                {
                  "key": "auth_token",
                  "value": "{{token}}",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                "type": "text/javascript",
                "exec": [
                  "//Receive Status code 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check the json structure in the response.\r",
                  "var schema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"properties\": {\r",
                  "    \"age\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"family\": {\r",
                  "      \"type\": \"object\",\r",
                  "      \"properties\": {\r",
                  "        \"children\": {\r",
                  "          \"type\": \"array\",\r",
                  "          \"items\": [\r",
                  "            {\r",
                  "              \"type\": \"array\",\r",
                  "              \"items\": [\r",
                  "                {\r",
                  "                  \"type\": \"string\"\r",
                  "                },\r",
                  "                {\r",
                  "                  \"type\": \"integer\"\r",
                  "                }\r",
                  "              ]\r",
                  "            },\r",
                  "            {\r",
                  "              \"type\": \"array\",\r",
                  "              \"items\": [\r",
                  "                {\r",
                  "                  \"type\": \"string\"\r",
                  "                },\r",
                  "                {\r",
                  "                  \"type\": \"integer\"\r",
                  "                }\r",
                  "              ]\r",
                  "            }\r",
                  "          ]\r",
                  "        },\r",
                  "        \"u_salary_1_5_year\": {\r",
                  "          \"type\": \"integer\"\r",
                  "        }\r",
                  "      },\r",
                  "      \"required\": [\r",
                  "        \"children\",\r",
                  "        \"u_salary_1_5_year\"\r",
                  "      ]\r",
                  "    },\r",
                  "    \"name\": {\r",
                  "      \"type\": \"string\"\r",
                  "    },\r",
                  "    \"salary\": {\r",
                  "      \"type\": \"integer\"\r",
                  "    }\r",
                  "  },\r",
                  "  \"required\": [\r",
                  "    \"age\",\r",
                  "    \"family\",\r",
                  "    \"name\",\r",
                  "    \"salary\"\r",
                  "  ],\r",
                  "  \"additionalProperties\": false\r",
                  "};\r",
                  "var RespData = pm.response.json()\r",
                  "\r",
                  "\r",
                  "pm.test('Schema is valid', function () {\r",
                  "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                  "   \r",
                  "});\r",
                  "console.log(tv4.error)\r",
                  "// Option2\r",
                  "var RespData = pm.response.json()\r",
                  "pm.test('Validate the schema json', function () {\r",
                  "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                  "   \r",
                  "});\r",
                  "//Check that the value of the field name = the value of the variable name from the environment\r",
                  "//Opt.1\r",
                  "var Env_Name = pm.environment.get(\"name\")\r",
                  "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                  "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                  "\r",
                  "});\r",
                  "//Opt.2\r",
                  "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                  "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                  "\r",
                  "});\r",
                  "\r",
                  "//Opt.3\r",
                  "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                  "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                  "\r",
                  "});\r",
                  "\r",
                  "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                  "var ReqData = request.data;\r",
                  "pm.test(\"Response age is equal to age request\", function () {\r",
                  "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                  "\r",
                  "});"
                ],
                "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c"
          },
          "item": [
            {
              "id": "725ca8bd-ef7e-4cbe-a410-7a47edfba320",
              "name": "Request_login",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "login",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "abracadabra",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f6d89c4-df54-46bb-ae5f-104f3ad0d8d3",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive token. \r",
                      "//In the environment Env3 add new variable token\r",
                      "var RespData = pm.response.json();\r",
                      "var resp_token = RespData.token;\r",
                      "console.log(resp_token);\r",
                      "\r",
                      "pm.environment.set(\"token\", resp_token);\r",
                      "//Optional:\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "a0595faa-92ee-4a2f-816e-42b3861c9b76"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bec79938-dfe9-4a9c-8c58-28554cad508a",
              "name": "Request_user_info",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5007",
                  "path": [
                    "user_info"
                  ],
                  "host": [
                    "162",
                    "55",
                    "220",
                    "72"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7db80c0-1554-4b0f-a09c-cbfbc4079c66",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"person\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"u_age\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        \"u_name\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"string\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"integer\"\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"u_age\",\r",
                      "        \"u_name\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"qa_salary_after_12_months\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"qa_salary_after_6_months\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"start_qa_salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"person\",\r",
                      "    \"qa_salary_after_12_months\",\r",
                      "    \"qa_salary_after_6_months\",\r",
                      "    \"start_qa_salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var u_salary_x4 = RespData.person.u_salary_1_5_year\r",
                      "pm.test(\"Salaryx4 is equal to u_salary_1_5_year\", function () {\r",
                      "    pm.expect(u_salary_x4).to.eql(RespData.person.u_name[1]*4)\r",
                      "});\r",
                      "\r",
                      "\r",
                      "var qa_salary_x2 = RespData.qa_salary_after_6_months\r",
                      "pm.test(\"Salaryx2 is equal to qa_salary_after_6_months\", function () {\r",
                      "    pm.expect(qa_salary_x2).to.eql(RespData.person.u_name[1]*2)\r",
                      "});\r",
                      "\r",
                      "var qa_salary_x2_9 = RespData.qa_salary_after_12_months\r",
                      "pm.test(\"Salaryx2.9 is equal to qa_salary_after_12_months\", function () {\r",
                      "    pm.expect(qa_salary_x2_9).to.eql(RespData.person.u_name[1]*2.9)\r",
                      "});\r",
                      "\r",
                      "//Get the value from response field \"u_salary_1_5_year\" and send it to the field salary of the request\r",
                      "\r",
                      "var u_salary = RespData.person.u_salary_1_5_year\r",
                      "pm.environment.set(\"salary\", u_salary)\r",
                      "\r",
                      "//Optional:\r",
                      "console.log(u_salary)\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "41a5d18d-6092-4e46-8ee9-6266047912b4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "38a6f3a0-6811-4f30-a0d1-b7c3a56e0377",
              "name": "Request_new_data",
              "request": {
                "url": {
                  "path": [
                    "new_data"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "1500",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc94badf-639c-4254-945b-ceba22e8aa0b",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"array\",\r",
                      "      \"items\": [\r",
                      "        {\r",
                      "          \"type\": \"integer\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        },\r",
                      "        {\r",
                      "          \"type\": \"string\"\r",
                      "        }\r",
                      "      ]\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "pm.test(\"Salaryx2 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Salaryx3 is equal to salary\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
                      "});\r",
                      "\r",
                      "//Check if 2nd element of salary array is greater than 1st and 0th\r",
                      "pm.test(\"2 perameter is more than 1\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
                      "});\r",
                      "\r",
                      "pm.test(\"2 perameter is more than 0\", function () {\r",
                      "    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
                      "});"
                    ],
                    "_lastExecutionId": "1ac86efd-338b-49b8-9351-37c3be24ee50"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f12a95bd-ff3f-4ac7-8732-4af06c6f4806",
              "name": "Request_test_pet_info",
              "request": {
                "url": {
                  "path": [
                    "test_pet_info"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "weight",
                      "value": "57",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01c3928d-76f1-4357-b873-6835d5c31521",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"daily_food\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"daily_sleep\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"daily_food\",\r",
                      "    \"daily_sleep\",\r",
                      "    \"name\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "\r",
                      "\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
                      "var RespData = pm.response.json()\r",
                      "var ReqData = request.data\r",
                      "var RespDf = RespData.daily_food\r",
                      "pm.test(\"weight*0.012 is equal to weight\", function () {\r",
                      "    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
                      "});\r",
                      "var RespDs = RespData.daily_sleep\r",
                      "pm.test(\"weight*2.5 is equal to weight\", function () {\r",
                      "    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
                      "});"
                    ],
                    "_lastExecutionId": "db8d82fb-f95e-4ba3-a7b5-74d42b5a3d8f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "27592faf-e46c-41d6-a4c6-274b17a664b0",
              "name": "Request_get_test_user",
              "request": {
                "url": {
                  "path": [
                    "get_test_user"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "age",
                      "value": "35",
                      "type": "text"
                    },
                    {
                      "key": "salary",
                      "value": "{{salary}}",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Mariia",
                      "type": "text"
                    },
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29f4f943-39df-4c61-bf8b-f87f83fd0caa",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "  \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"age\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"family\": {\r",
                      "      \"type\": \"object\",\r",
                      "      \"properties\": {\r",
                      "        \"children\": {\r",
                      "          \"type\": \"array\",\r",
                      "          \"items\": [\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            },\r",
                      "            {\r",
                      "              \"type\": \"array\",\r",
                      "              \"items\": [\r",
                      "                {\r",
                      "                  \"type\": \"string\"\r",
                      "                },\r",
                      "                {\r",
                      "                  \"type\": \"integer\"\r",
                      "                }\r",
                      "              ]\r",
                      "            }\r",
                      "          ]\r",
                      "        },\r",
                      "        \"u_salary_1_5_year\": {\r",
                      "          \"type\": \"integer\"\r",
                      "        }\r",
                      "      },\r",
                      "      \"required\": [\r",
                      "        \"children\",\r",
                      "        \"u_salary_1_5_year\"\r",
                      "      ]\r",
                      "    },\r",
                      "    \"name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"salary\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"age\",\r",
                      "    \"family\",\r",
                      "    \"name\",\r",
                      "    \"salary\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "};\r",
                      "var RespData = pm.response.json()\r",
                      "\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
                      "   \r",
                      "});\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});\r",
                      "//Check that the value of the field name = the value of the variable name from the environment\r",
                      "//Opt.1\r",
                      "var Env_Name = pm.environment.get(\"name\")\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(Env_Name)\r",
                      "\r",
                      "});\r",
                      "//Opt.2\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Opt.3\r",
                      "pm.test(\"Value of the field name is equal to variable name\", function () {\r",
                      "    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
                      "var ReqData = request.data;\r",
                      "pm.test(\"Response age is equal to age request\", function () {\r",
                      "    pm.expect(RespData.age).to.eql(ReqData.age)\r",
                      "\r",
                      "});"
                    ],
                    "_lastExecutionId": "e4fd0049-e9f5-4016-be19-367cf0d071fd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "e2a5c4f5-d246-4b83-90bc-ec6ab381f003",
              "name": "Request_currency",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bb9281b3-c064-46c1-9645-7b7371ed096d",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Take any object from the sent list, use js random. Take the Cur_ID in the object and pass it through the environment to the next request.\r",
                      "var RespData = pm.response.json();\r",
                      " \r",
                      "function getRndInteger() {\r",
                      "  return Math.floor(Math.random() * RespData.length);\r",
                      "}\r",
                      "var rand = Math.floor(Math.random() * RespData.length);\r",
                      "console.log(rand)\r",
                      "pm.environment.set(\"Cur_ID\", rand);\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f9570ab4-9e2b-43b8-b15e-1f1cd9e3a3cd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "8cee4322-b0d2-4478-99b4-e133c7b6a531",
              "name": "Request_curr_byn",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "curr_byn"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    },
                    {
                      "key": "curr_code",
                      "value": "{{Cur_ID}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "024075f2-0ff6-4158-bb9e-9308b9ec81b1",
                    "type": "text/javascript",
                    "exec": [
                      "//Receive Status code 200 response\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Check the json structure in the response.\r",
                      "var schema = {\r",
                      "    \"type\": \"object\",\r",
                      "  \"properties\": {\r",
                      "    \"Cur_Abbreviation\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_ID\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Cur_Name\": {\r",
                      "      \"type\": \"string\"\r",
                      "    },\r",
                      "    \"Cur_OfficialRate\": {\r",
                      "      \"type\": \"number\"\r",
                      "    },\r",
                      "    \"Cur_Scale\": {\r",
                      "      \"type\": \"integer\"\r",
                      "    },\r",
                      "    \"Date\": {\r",
                      "      \"type\": \"string\"\r",
                      "    }\r",
                      "  },\r",
                      "  \"required\": [\r",
                      "    \"Cur_Abbreviation\",\r",
                      "    \"Cur_ID\",\r",
                      "    \"Cur_Name\",\r",
                      "    \"Cur_OfficialRate\",\r",
                      "    \"Cur_Scale\",\r",
                      "    \"Date\"\r",
                      "  ],\r",
                      "  \"additionalProperties\": false\r",
                      "}\r",
                      "\r",
                      "var RespData = pm.response.json();\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    pm.expect(tv4.validate(RespData, schema)).to.be.true\r",
                      "    });\r",
                      "console.log(tv4.error)\r",
                      "// Option2\r",
                      "var RespData = pm.response.json()\r",
                      "pm.test('Validate the schema json', function () {\r",
                      "    pm.expect(RespData).to.have.jsonSchema(schema);\r",
                      "   \r",
                      "});"
                    ],
                    "_lastExecutionId": "cf173d7a-3140-4a2c-b40c-cd40ec8287b3"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ef349946-9bce-4550-81ee-a01389af2149",
              "name": "Request_currency ***",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "80",
                  "path": [
                    "currency"
                  ],
                  "host": [
                    "54",
                    "157",
                    "99",
                    "22"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "auth_token",
                      "value": "{{token}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c99edb24-0098-45b8-812f-d85bcf4f2ee5",
                    "type": "text/javascript",
                    "exec": [
                      "//Optional\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "/*Cycle\r",
                      "get a list of currencies\r",
                      "iterate the list of currencies\r",
                      "in each iteration, send a request to the server to get the rate of each currency\r",
                      "if 500 code is returned, go to the next iteration\r",
                      "if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
                      "if there is a field, we write information about the currency in the console in the form of response*/\r",
                      "\r",
                      "let RespData = pm.response.json();\r",
                      "let token = pm.environment.get('token');\r",
                      "for (let i = 0; i < RespData.length; i ++)  {\r",
                      "cur_id = RespData[i].Cur_ID;    \r",
                      "    const postRequest = {\r",
                      "        url: 'http://54.157.99.22:80/curr_byn',\r",
                      "        method: 'POST',\r",
                      "        header: {\r",
                      "            'Content-Type': 'application/json',\r",
                      "     },\r",
                      "        body: {\r",
                      "            mode: 'formdata',\r",
                      "            formdata: [\r",
                      "                { key: 'auth_token', value: token},\r",
                      "                { key: 'curr_code', value: `${cur_id}` }\r",
                      "        ]    }\r",
                      "};\r",
                      "pm.sendRequest(postRequest, (err, response) => {\r",
                      "\r",
                      " if  (pm.response.code === 200) {  \r",
                      "    let resp_Data = response.json()\r",
                      "     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
                      "   { console.log(resp_Data)}\r",
                      "            \r",
                      "        } \r",
                      "if (pm.response.code === 500) {\r",
                      "return} \r",
                      "else {console.log('error')}  \r",
                      "}   \r",
                      "  )       \r",
                      "      }\r",
                      "\r",
                      "// console.log(err? err: resp.json())\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5a7c6646-a773-4555-972f-49859521b055"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [],
          "variable": [
            {
              "id": "88eae7b0-12de-42c8-a41c-d31f457e47a3",
              "type": "any",
              "value": "",
              "key": "sanity"
            }
          ],
          "info": {
            "_postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c",
            "name": "Postman 3",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "ee666b74-ec10-47c0-9507-a86d07c6bb1b",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fef08e59-651f-49dd-969d-9034a227760f",
          "scriptId": "29f4f943-39df-4c61-bf8b-f87f83fd0caa"
        }
      }
    ],
    "error": null
  }
}