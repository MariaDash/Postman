{
	"info": {
		"_postman_id": "c83edaad-592e-4c5c-aa40-b72e2c1dfe5c",
		"name": "Postman 3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25452132",
		"_collection_link": "https://martian-eclipse-164562.postman.co/workspace/Vadim_Ksendzov_Course~2bc2f594-6f3d-4174-b39a-b127d38dac7a/collection/25452132-c83edaad-592e-4c5c-aa40-b72e2c1dfe5c?action=share&creator=25452132&source=collection_link"
	},
	"item": [
		{
			"name": "Request_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Receive token. \r",
							"//In the environment Env3 add new variable token\r",
							"var RespData = pm.response.json();\r",
							"var resp_token = RespData.token;\r",
							"console.log(resp_token);\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);\r",
							"//Optional:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Mariia",
							"type": "text"
						},
						{
							"key": "password",
							"value": "abracadabra",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Receive Status code 200 response\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check the json structure in the response.\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ],\r",
							"  \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"\r",
							"var RespData = pm.response.json()\r",
							"pm.test('Validate the schema json', function () {\r",
							"    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
							"   \r",
							"});\r",
							"console.log(tv4.error)\r",
							"// Option2\r",
							"var RespData = pm.response.json()\r",
							"pm.test('Validate the schema json', function () {\r",
							"    pm.expect(RespData).to.have.jsonSchema(schema);\r",
							"   \r",
							"});\r",
							"\r",
							"//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
							"var u_salary_x4 = RespData.person.u_salary_1_5_year\r",
							"pm.test(\"Salaryx4 is equal to u_salary_1_5_year\", function () {\r",
							"    pm.expect(u_salary_x4).to.eql(RespData.person.u_name[1]*4)\r",
							"});\r",
							"\r",
							"\r",
							"var qa_salary_x2 = RespData.qa_salary_after_6_months\r",
							"pm.test(\"Salaryx2 is equal to qa_salary_after_6_months\", function () {\r",
							"    pm.expect(qa_salary_x2).to.eql(RespData.person.u_name[1]*2)\r",
							"});\r",
							"\r",
							"var qa_salary_x2_9 = RespData.qa_salary_after_12_months\r",
							"pm.test(\"Salaryx2.9 is equal to qa_salary_after_12_months\", function () {\r",
							"    pm.expect(qa_salary_x2_9).to.eql(RespData.person.u_name[1]*2.9)\r",
							"});\r",
							"\r",
							"//Get the value from response field \"u_salary_1_5_year\" and send it to the field salary of the request\r",
							"\r",
							"var u_salary = RespData.person.u_salary_1_5_year\r",
							"pm.environment.set(\"salary\", u_salary)\r",
							"\r",
							"//Optional:\r",
							"console.log(u_salary)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\" :35,\r\n    \"salary\" : 1500,\r\n    \"name\" : \"Mariia\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Receive Status code 200 response\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check the json structure in the response.\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ],\r",
							"  \"additionalProperties\": false\r",
							"};\r",
							"\r",
							"\r",
							"var RespData = pm.response.json()\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
							"   \r",
							"});\r",
							"console.log(tv4.error)\r",
							"// Option2\r",
							"var RespData = pm.response.json()\r",
							"pm.test('Validate the schema json', function () {\r",
							"    pm.expect(RespData).to.have.jsonSchema(schema);\r",
							"   \r",
							"});\r",
							"//The response contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.\r",
							"pm.test(\"Salaryx2 is equal to salary\", function () {\r",
							"    pm.expect(+RespData.salary[1]).to.eql(RespData.salary[0]*2)\r",
							"});\r",
							"\r",
							"pm.test(\"Salaryx3 is equal to salary\", function () {\r",
							"    pm.expect(+RespData.salary[2]).to.eql(RespData.salary[0]*3)\r",
							"});\r",
							"\r",
							"//Check if 2nd element of salary array is greater than 1st and 0th\r",
							"pm.test(\"2 perameter is more than 1\", function () {\r",
							"    pm.expect(+RespData.salary[2]).to.be.above(+RespData.salary[1])\r",
							"});\r",
							"\r",
							"pm.test(\"2 perameter is more than 0\", function () {\r",
							"    pm.expect(+RespData.salary[2]).to.be.above(RespData.salary[0])\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Mariia",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Receive Status code 200 response\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check the json structure in the response.\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ],\r",
							"  \"additionalProperties\": false\r",
							"};\r",
							"\r",
							"\r",
							"var RespData = pm.response.json()\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
							"   \r",
							"});\r",
							"console.log(tv4.error)\r",
							"// Option2\r",
							"var RespData = pm.response.json()\r",
							"pm.test('Validate the schema json', function () {\r",
							"    pm.expect(RespData).to.have.jsonSchema(schema);\r",
							"   \r",
							"});\r",
							"//The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.\r",
							"var RespData = pm.response.json()\r",
							"var ReqData = request.data\r",
							"var RespDf = RespData.daily_food\r",
							"pm.test(\"weight*0.012 is equal to weight\", function () {\r",
							"    pm.expect(RespDf).to.eql(ReqData.weight*0.012)\r",
							"});\r",
							"var RespDs = RespData.daily_sleep\r",
							"pm.test(\"weight*2.5 is equal to weight\", function () {\r",
							"    pm.expect(RespDs).to.eql(ReqData.weight*2.5)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "57",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Mariia",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Receive Status code 200 response\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check the json structure in the response.\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ],\r",
							"  \"additionalProperties\": false\r",
							"};\r",
							"var RespData = pm.response.json()\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
							"   \r",
							"});\r",
							"console.log(tv4.error)\r",
							"// Option2\r",
							"var RespData = pm.response.json()\r",
							"pm.test('Validate the schema json', function () {\r",
							"    pm.expect(RespData).to.have.jsonSchema(schema);\r",
							"   \r",
							"});\r",
							"//Check that the value of the field name = the value of the variable name from the environment\r",
							"//Opt.1\r",
							"var Env_Name = pm.environment.get(\"name\")\r",
							"pm.test(\"Value of the field name is equal to variable name\", function () {\r",
							"    pm.expect(RespData.name).to.eql(Env_Name)\r",
							"\r",
							"});\r",
							"//Opt.2\r",
							"pm.test(\"Value of the field name is equal to variable name\", function () {\r",
							"    pm.expect(RespData.name).to.eql(pm.environment.toObject().name)\r",
							"\r",
							"});\r",
							"\r",
							"//Opt.3\r",
							"pm.test(\"Value of the field name is equal to variable name\", function () {\r",
							"    pm.expect(RespData.name).to.eql(pm.environment.get(\"name\"))\r",
							"\r",
							"});\r",
							"\r",
							"//Check that the value of the age field in the response matches the value of the age field sent in the request\r",
							"var ReqData = request.data;\r",
							"pm.test(\"Response age is equal to age request\", function () {\r",
							"    pm.expect(RespData.age).to.eql(ReqData.age)\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Mariia",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Optional\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Take any object from the sent list, use js random. Take the Cur_ID in the object and pass it through the environment to the next request.\r",
							"var RespData = pm.response.json();\r",
							" \r",
							"function getRndInteger() {\r",
							"  return Math.floor(Math.random() * RespData.length);\r",
							"}\r",
							"var rand = Math.floor(Math.random() * RespData.length);\r",
							"console.log(rand)\r",
							"pm.environment.set(\"Cur_ID\", rand);\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Receive Status code 200 response\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check the json structure in the response.\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ],\r",
							"  \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"var RespData = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(RespData, schema)).to.be.true\r",
							"    });\r",
							"console.log(tv4.error)\r",
							"// Option2\r",
							"var RespData = pm.response.json()\r",
							"pm.test('Validate the schema json', function () {\r",
							"    pm.expect(RespData).to.have.jsonSchema(schema);\r",
							"   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_currency ***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Optional\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*Cycle\r",
							"get a list of currencies\r",
							"iterate the list of currencies\r",
							"in each iteration, send a request to the server to get the rate of each currency\r",
							"if 500 code is returned, go to the next iteration\r",
							"if we get 200 code, check the response json for the presence of the \"Cur_OfficialRate\" field\r",
							"if there is a field, we write information about the currency in the console in the form of response*/\r",
							"\r",
							"let RespData = pm.response.json();\r",
							"let token = pm.environment.get('token');\r",
							"for (let i = 0; i < RespData.length; i ++)  {\r",
							"cur_id = RespData[i].Cur_ID;    \r",
							"    const postRequest = {\r",
							"        url: 'http://54.157.99.22:80/curr_byn',\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json',\r",
							"     },\r",
							"        body: {\r",
							"            mode: 'formdata',\r",
							"            formdata: [\r",
							"                { key: 'auth_token', value: token},\r",
							"                { key: 'curr_code', value: `${cur_id}` }\r",
							"        ]    }\r",
							"};\r",
							"pm.sendRequest(postRequest, (err, response) => {\r",
							"\r",
							" if  (pm.response.code === 200) {  \r",
							"    let resp_Data = response.json()\r",
							"     if (resp_Data.hasOwnProperty(\"Cur_OfficialRate\"))\r",
							"   { console.log(resp_Data)}\r",
							"            \r",
							"        } \r",
							"if (pm.response.code === 500) {\r",
							"return} \r",
							"else {console.log('error')}  \r",
							"}   \r",
							"  )       \r",
							"      }\r",
							"\r",
							"// console.log(err? err: resp.json())\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "sanity",
			"value": ""
		}
	]
}